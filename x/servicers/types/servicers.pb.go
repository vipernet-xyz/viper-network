// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicers.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_vipernet_xyz_viper_network_types "github.com/vipernet-xyz/viper-network/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
	types "github.com/tendermint/tendermint/abci/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtoValidator struct {
	Address                 github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=Address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	PublicKey               []byte                                              `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed                  bool                                                `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed"`
	Paused                  bool                                                `protobuf:"varint,4,opt,name=paused,proto3" json:"paused"`
	Status                  int32                                               `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	Chains                  []string                                            `protobuf:"bytes,6,rep,name=Chains,proto3" json:"chains"`
	ServiceURL              string                                              `protobuf:"bytes,7,opt,name=ServiceURL,proto3" json:"service_url"`
	StakedTokens            github_com_vipernet_xyz_viper_network_types.BigInt  `protobuf:"bytes,8,opt,name=StakedTokens,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"tokens"`
	GeoZone                 string                                              `protobuf:"bytes,9,opt,name=GeoZone,proto3" json:"geo_zone"`
	UnstakingCompletionTime time.Time                                           `protobuf:"bytes,10,opt,name=UnstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
	OutputAddress           github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,11,opt,name=OutputAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"output_address,omitempty" yaml:"output_address"`
}

func (m *ProtoValidator) Reset()      { *m = ProtoValidator{} }
func (*ProtoValidator) ProtoMessage() {}
func (*ProtoValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5b9786f59292525, []int{0}
}
func (m *ProtoValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoValidator.Merge(m, src)
}
func (m *ProtoValidator) XXX_Size() int {
	return m.Size()
}
func (m *ProtoValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoValidator.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoValidator proto.InternalMessageInfo

type LegacyProtoValidator struct {
	Address                 github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=Address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	PublicKey               []byte                                              `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed                  bool                                                `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed"`
	Paused                  bool                                                `protobuf:"varint,4,opt,name=paused,proto3" json:"paused"`
	Status                  int32                                               `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	Chains                  []string                                            `protobuf:"bytes,6,rep,name=Chains,proto3" json:"chains"`
	ServiceURL              string                                              `protobuf:"bytes,7,opt,name=ServiceURL,proto3" json:"service_url"`
	StakedTokens            github_com_vipernet_xyz_viper_network_types.BigInt  `protobuf:"bytes,8,opt,name=StakedTokens,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"tokens"`
	GeoZone                 string                                              `protobuf:"bytes,9,opt,name=GeoZone,proto3" json:"geo_zone"`
	UnstakingCompletionTime time.Time                                           `protobuf:"bytes,10,opt,name=UnstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
}

func (m *LegacyProtoValidator) Reset()      { *m = LegacyProtoValidator{} }
func (*LegacyProtoValidator) ProtoMessage() {}
func (*LegacyProtoValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5b9786f59292525, []int{1}
}
func (m *LegacyProtoValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyProtoValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyProtoValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyProtoValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyProtoValidator.Merge(m, src)
}
func (m *LegacyProtoValidator) XXX_Size() int {
	return m.Size()
}
func (m *LegacyProtoValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyProtoValidator.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyProtoValidator proto.InternalMessageInfo

// ValidatorSigningInfo defines the signing info for a validator
type ValidatorSigningInfo struct {
	Address github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address"`
	// height at which validator was first a candidate OR was unjailed
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height" yaml:"start_height"`
	// index offset into signed block bit array
	Index int64 `protobuf:"varint,3,opt,name=Index,proto3" json:"index_offset" yaml:"index_offset"`
	// timestamp validator cannot be unjailed until
	JailedUntil time.Time `protobuf:"bytes,4,opt,name=jailed_until,json=jailedUntil,proto3,stdtime" json:"jailed_until" yaml:"jailed_until"`
	// missed blocks counter (to avoid scanning the array every time)
	MissedBlocksCounter int64     `protobuf:"varint,5,opt,name=missed_blocks_counter,json=missedBlocksCounter,proto3" json:"missed_blocks_counter" yaml:"missed_blocks_counter"`
	JailedBlocksCounter int64     `protobuf:"varint,6,opt,name=jailed_blocks_counter,json=jailedBlocksCounter,proto3" json:"jailed_blocks_counter" yaml:"jailed_blocks_counter"`
	PausedUntil         time.Time `protobuf:"bytes,7,opt,name=paused_until,json=pausedUntil,proto3,stdtime" json:"paused_until" yaml:"paused_until"`
}

func (m *ValidatorSigningInfo) Reset()      { *m = ValidatorSigningInfo{} }
func (*ValidatorSigningInfo) ProtoMessage() {}
func (*ValidatorSigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5b9786f59292525, []int{2}
}
func (m *ValidatorSigningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSigningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSigningInfo.Merge(m, src)
}
func (m *ValidatorSigningInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSigningInfo proto.InternalMessageInfo

func (m *ValidatorSigningInfo) GetAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ValidatorSigningInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *ValidatorSigningInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorSigningInfo) GetJailedUntil() time.Time {
	if m != nil {
		return m.JailedUntil
	}
	return time.Time{}
}

func (m *ValidatorSigningInfo) GetMissedBlocksCounter() int64 {
	if m != nil {
		return m.MissedBlocksCounter
	}
	return 0
}

func (m *ValidatorSigningInfo) GetJailedBlocksCounter() int64 {
	if m != nil {
		return m.JailedBlocksCounter
	}
	return 0
}

func (m *ValidatorSigningInfo) GetPausedUntil() time.Time {
	if m != nil {
		return m.PausedUntil
	}
	return time.Time{}
}

type ReportCard struct {
	TotalSessions          int64                                              `protobuf:"varint,1,opt,name=TotalSessions,proto3" json:"total_sessions"`
	TotalLatencyScore      github_com_vipernet_xyz_viper_network_types.BigDec `protobuf:"bytes,2,opt,name=TotalLatencyScore,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigDec" json:"total_latency_score"`
	TotalAvailabilityScore github_com_vipernet_xyz_viper_network_types.BigDec `protobuf:"bytes,3,opt,name=TotalAvailabilityScore,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigDec" json:"total_availability_score"`
}

func (m *ReportCard) Reset()      { *m = ReportCard{} }
func (*ReportCard) ProtoMessage() {}
func (*ReportCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5b9786f59292525, []int{3}
}
func (m *ReportCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportCard.Merge(m, src)
}
func (m *ReportCard) XXX_Size() int {
	return m.Size()
}
func (m *ReportCard) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportCard.DiscardUnknown(m)
}

var xxx_messageInfo_ReportCard proto.InternalMessageInfo

func (m *ReportCard) GetTotalSessions() int64 {
	if m != nil {
		return m.TotalSessions
	}
	return 0
}

type HistoricalInfo struct {
	Header types.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Valset []Validator  `protobuf:"bytes,2,rep,name=valset,proto3" json:"valset"`
}

func (m *HistoricalInfo) Reset()         { *m = HistoricalInfo{} }
func (m *HistoricalInfo) String() string { return proto.CompactTextString(m) }
func (*HistoricalInfo) ProtoMessage()    {}
func (*HistoricalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5b9786f59292525, []int{0}
}
func (m *HistoricalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalInfo.Merge(m, src)
}
func (m *HistoricalInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalInfo proto.InternalMessageInfo

func (m *HistoricalInfo) GetHeader() types.Header {
	if m != nil {
		return m.Header
	}
	return types.Header{}
}

func (m *HistoricalInfo) GetValset() []Validator {
	if m != nil {
		return m.Valset
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtoValidator)(nil), "x.servicers.ProtoValidator")
	proto.RegisterType((*LegacyProtoValidator)(nil), "x.servicers.LegacyProtoValidator")
	proto.RegisterType((*ValidatorSigningInfo)(nil), "x.servicers.ValidatorSigningInfo")
	proto.RegisterType((*ReportCard)(nil), "x.servicers.ReportCard")
	proto.RegisterType((*HistoricalInfo)(nil), "x.servicers.HistoricalInfo")
}

func init() { proto.RegisterFile("servicers.proto", fileDescriptor_f5b9786f59292525) }

var fileDescriptor_f5b9786f59292525 = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x3f, 0x6f, 0xe4, 0x44,
	0x18, 0xc6, 0xd7, 0xb7, 0xe4, 0xdf, 0xec, 0x5e, 0x4e, 0xe7, 0xe4, 0xc0, 0x8a, 0x90, 0x67, 0x65,
	0x24, 0xd8, 0x82, 0xdb, 0x95, 0x2e, 0x05, 0x10, 0x89, 0x22, 0xce, 0x49, 0x10, 0x88, 0xc4, 0xe1,
	0x24, 0x57, 0x9c, 0x90, 0xac, 0x59, 0x7b, 0xe2, 0x0c, 0x6b, 0xcf, 0x58, 0x9e, 0x71, 0xc8, 0x5e,
	0x03, 0x25, 0x34, 0xe8, 0x44, 0x45, 0x99, 0x92, 0x4f, 0xc0, 0x37, 0x40, 0x5c, 0x99, 0x32, 0xa2,
	0x30, 0x64, 0xd3, 0x9c, 0x5c, 0x9d, 0x52, 0x52, 0x21, 0xcf, 0xcc, 0x66, 0x77, 0x43, 0x0e, 0x1d,
	0xa1, 0xa1, 0xb8, 0xca, 0xf6, 0xef, 0x7d, 0xe6, 0x7d, 0xde, 0xcc, 0x3c, 0x13, 0x2d, 0xb8, 0xc5,
	0x71, 0x76, 0x40, 0x02, 0x9c, 0xf1, 0x4e, 0x9a, 0x31, 0xc1, 0xcc, 0xc6, 0x61, 0xe7, 0x02, 0xad,
	0x2c, 0x47, 0x2c, 0x62, 0x92, 0x77, 0xab, 0x37, 0x25, 0x59, 0x81, 0x11, 0x63, 0x51, 0x8c, 0xbb,
	0xf2, 0xab, 0x97, 0xef, 0x75, 0x05, 0x49, 0x30, 0x17, 0x28, 0x49, 0xb5, 0xc0, 0xbe, 0x2c, 0x08,
	0xf3, 0x0c, 0x09, 0xc2, 0xa8, 0xaa, 0x3b, 0xbf, 0xcc, 0x82, 0xc5, 0x07, 0xd5, 0xdb, 0x43, 0x14,
	0x93, 0x10, 0x09, 0x96, 0x99, 0x14, 0xcc, 0xad, 0x87, 0x61, 0x86, 0x39, 0xb7, 0x8c, 0x96, 0xd1,
	0x6e, 0xba, 0x3b, 0x65, 0x01, 0xe7, 0x90, 0x42, 0xe7, 0x05, 0x5c, 0x1c, 0xa0, 0x24, 0x5e, 0x73,
	0x34, 0x70, 0xfe, 0x2c, 0xe0, 0x6a, 0x44, 0xc4, 0x7e, 0xde, 0xeb, 0x04, 0x2c, 0xe9, 0x1e, 0x90,
	0x14, 0x67, 0x14, 0x8b, 0xbb, 0x87, 0x83, 0xc7, 0xea, 0xe3, 0x2e, 0xc5, 0xe2, 0x2b, 0x96, 0xf5,
	0xbb, 0x62, 0x90, 0x62, 0xde, 0xd1, 0xbd, 0xbd, 0x91, 0x89, 0xb9, 0x0e, 0x16, 0x1e, 0xe4, 0xbd,
	0x98, 0x04, 0x9f, 0xe2, 0x81, 0x75, 0x43, 0x3a, 0xbe, 0x55, 0x16, 0x10, 0xa4, 0x12, 0xfa, 0x7d,
	0x3c, 0x38, 0x2f, 0xe0, 0x6d, 0x65, 0x3a, 0x66, 0x8e, 0x37, 0x5e, 0x65, 0x3a, 0x60, 0xf6, 0x4b,
	0x44, 0x62, 0x1c, 0x5a, 0xf5, 0x96, 0xd1, 0x9e, 0x77, 0x41, 0x59, 0x40, 0x4d, 0x3c, 0xfd, 0xac,
	0x34, 0x29, 0xca, 0x39, 0x0e, 0xad, 0xd7, 0xc6, 0x1a, 0x45, 0x3c, 0xfd, 0xac, 0x34, 0x5c, 0x20,
	0x91, 0x73, 0x6b, 0xa6, 0x65, 0xb4, 0x67, 0x94, 0x46, 0x11, 0x4f, 0x3f, 0x2b, 0xcd, 0xc6, 0x3e,
	0x22, 0x94, 0x5b, 0xb3, 0xad, 0x7a, 0x7b, 0x41, 0x69, 0x02, 0x49, 0x3c, 0x5d, 0x31, 0xbb, 0x00,
	0x6c, 0xab, 0x93, 0xdb, 0xf5, 0xb6, 0xac, 0xb9, 0x96, 0xd1, 0x5e, 0x70, 0x6f, 0x95, 0x05, 0x6c,
	0xe8, 0xf3, 0xf4, 0xf3, 0x2c, 0xf6, 0x26, 0x24, 0xe6, 0x3e, 0x68, 0x6e, 0x0b, 0xd4, 0xc7, 0xe1,
	0x0e, 0xeb, 0x63, 0xca, 0xad, 0x79, 0xb9, 0xe4, 0xfe, 0xd3, 0x02, 0xd6, 0x7e, 0x2b, 0xe0, 0xbd,
	0x7f, 0xb3, 0xbf, 0x2e, 0x89, 0x36, 0xa9, 0xa8, 0x86, 0x12, 0xb2, 0x97, 0x37, 0xd5, 0xd9, 0x7c,
	0x1b, 0xcc, 0x7d, 0x84, 0xd9, 0x23, 0x46, 0xb1, 0xb5, 0x20, 0x4d, 0x9a, 0x65, 0x01, 0xe7, 0x23,
	0xcc, 0xfc, 0xc7, 0x8c, 0x62, 0x6f, 0x54, 0x34, 0xbf, 0x33, 0xc0, 0x1b, 0xbb, 0x94, 0x0b, 0xd4,
	0x27, 0x34, 0xda, 0x60, 0x49, 0x1a, 0xe3, 0x2a, 0x36, 0x3b, 0x24, 0xc1, 0x16, 0x68, 0x19, 0xed,
	0xc6, 0xbd, 0x95, 0x8e, 0xca, 0x56, 0x67, 0x94, 0xad, 0xce, 0xce, 0x28, 0x7c, 0xee, 0x6a, 0x35,
	0x79, 0x59, 0xc0, 0xc5, 0x7c, 0xd4, 0xc2, 0xaf, 0x92, 0x79, 0x5e, 0xc0, 0x3b, 0xea, 0x20, 0xa7,
	0xb9, 0xf3, 0xe4, 0x77, 0x68, 0x78, 0x2f, 0xf2, 0x33, 0x7f, 0x30, 0xc0, 0xcd, 0xcf, 0x72, 0x91,
	0xe6, 0x62, 0x14, 0xcc, 0x86, 0x8c, 0x49, 0x5c, 0x16, 0xd0, 0x62, 0xb2, 0xe0, 0xeb, 0x38, 0xbe,
	0xcb, 0x12, 0x22, 0x70, 0x92, 0x8a, 0xc1, 0xd8, 0x6b, 0x5a, 0x71, 0xed, 0xc0, 0x4e, 0x8f, 0xb0,
	0xd6, 0xfc, 0xf6, 0x08, 0xd6, 0x7e, 0x3c, 0x82, 0xb5, 0x67, 0x47, 0xd0, 0x70, 0x7e, 0x9e, 0x01,
	0xcb, 0x5b, 0x38, 0x42, 0xc1, 0xe0, 0xd5, 0x6d, 0x7a, 0x75, 0x9b, 0xfe, 0xcf, 0xb7, 0xe9, 0x52,
	0x70, 0x7f, 0x9d, 0x01, 0xcb, 0x17, 0x69, 0xdd, 0x26, 0x11, 0x25, 0x34, 0xda, 0xa4, 0x7b, 0xcc,
	0xfc, 0x02, 0x8c, 0x52, 0xaa, 0x83, 0xeb, 0x4e, 0x04, 0xf7, 0xda, 0x31, 0xd5, 0xeb, 0xcd, 0x4f,
	0x40, 0x93, 0x0b, 0x94, 0x09, 0x7f, 0x1f, 0x93, 0x68, 0x5f, 0xc8, 0xa4, 0xd6, 0xdd, 0x77, 0xca,
	0x02, 0x4e, 0xf1, 0xf3, 0x02, 0x2e, 0xa9, 0x3f, 0x71, 0x92, 0x3a, 0x5e, 0x43, 0x7e, 0x7e, 0x2c,
	0xbf, 0xcc, 0x0f, 0xc1, 0xcc, 0x26, 0x0d, 0xf1, 0xa1, 0x8c, 0xab, 0x6e, 0x42, 0x2a, 0xe0, 0xb3,
	0xbd, 0x3d, 0x8e, 0x27, 0x9a, 0x4c, 0x52, 0xc7, 0x53, 0xab, 0x4c, 0x0a, 0x9a, 0x2a, 0xd4, 0x7e,
	0x4e, 0x05, 0x89, 0x65, 0xa0, 0xff, 0xf9, 0x3c, 0xba, 0xfa, 0x3c, 0xa6, 0xd6, 0x8d, 0x5d, 0x26,
	0xa9, 0x3a, 0x8b, 0x86, 0x42, 0xbb, 0x15, 0x31, 0x13, 0x70, 0x27, 0x21, 0x9c, 0xe3, 0xd0, 0xef,
	0xc5, 0x2c, 0xe8, 0x73, 0x3f, 0x60, 0x39, 0x15, 0x38, 0x93, 0xb7, 0xa4, 0xee, 0x7e, 0x50, 0x16,
	0xf0, 0x6a, 0xc1, 0x79, 0x01, 0xdf, 0x54, 0x0e, 0x57, 0x96, 0x1d, 0x6f, 0x49, 0x71, 0x57, 0xe2,
	0x0d, 0x45, 0x2b, 0x3b, 0x3d, 0xd0, 0x25, 0xbb, 0xd9, 0xb1, 0xdd, 0x95, 0x82, 0xb1, 0xdd, 0x95,
	0x65, 0xc7, 0x5b, 0x52, 0x7c, 0xda, 0x8e, 0x82, 0xa6, 0xba, 0xfe, 0x7a, 0x37, 0xe7, 0x5e, 0x7e,
	0x37, 0x27, 0xd7, 0x8d, 0x77, 0x73, 0x92, 0xea, 0xdd, 0x54, 0x48, 0xee, 0xe6, 0xda, 0xfc, 0x45,
	0x92, 0x4f, 0x6e, 0x00, 0xe0, 0xe1, 0x94, 0x65, 0x62, 0x03, 0x65, 0xa1, 0xf9, 0x3e, 0xb8, 0xb9,
	0xc3, 0x04, 0x8a, 0xb7, 0x31, 0xe7, 0x84, 0x51, 0x95, 0xe2, 0xba, 0x6b, 0x56, 0xf7, 0x48, 0x54,
	0x05, 0x9f, 0xeb, 0x8a, 0x37, 0x2d, 0x34, 0xbf, 0x06, 0xb7, 0x25, 0xd8, 0x42, 0x02, 0xd3, 0x60,
	0xb0, 0x1d, 0xb0, 0x0c, 0xcb, 0x80, 0x2e, 0xb8, 0x9f, 0x5f, 0xf3, 0x7f, 0xc8, 0x7d, 0x1c, 0x94,
	0x05, 0x5c, 0x52, 0xbe, 0xb1, 0xea, 0xeb, 0xf3, 0xaa, 0xb1, 0xf7, 0x77, 0x2f, 0xf3, 0x7b, 0x03,
	0xbc, 0x2e, 0xe9, 0xfa, 0x01, 0x22, 0x31, 0xea, 0x91, 0x98, 0x08, 0x3d, 0x46, 0x5d, 0x8e, 0xf1,
	0xf0, 0x3f, 0x8d, 0x61, 0xa9, 0x31, 0xd0, 0x44, 0x73, 0x3d, 0xcb, 0x0b, 0x5c, 0xdd, 0xe4, 0xf8,
	0xd4, 0xae, 0x9d, 0x9c, 0xda, 0xb5, 0xe7, 0xa7, 0xb6, 0xf1, 0xcd, 0xd0, 0x36, 0x7e, 0x1a, 0xda,
	0xc6, 0xd3, 0xa1, 0x6d, 0x1c, 0x0f, 0x6d, 0xe3, 0x8f, 0xa1, 0x6d, 0x3c, 0x1b, 0xda, 0xb5, 0xe7,
	0x43, 0xdb, 0x78, 0x72, 0x66, 0xd7, 0x8e, 0xcf, 0xec, 0xda, 0xc9, 0x99, 0x5d, 0x7b, 0xf4, 0xde,
	0xcb, 0x4d, 0x77, 0xd8, 0xbd, 0xf8, 0x95, 0xab, 0x26, 0xed, 0xcd, 0xca, 0x94, 0xac, 0xfe, 0x15,
	0x00, 0x00, 0xff, 0xff, 0xd0, 0xb1, 0xa8, 0x94, 0x12, 0x0b, 0x00, 0x00,
}

func (this *ProtoValidator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoValidator)
	if !ok {
		that2, ok := that.(ProtoValidator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Paused != that1.Paused {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if this.ServiceURL != that1.ServiceURL {
		return false
	}
	if !this.StakedTokens.Equal(that1.StakedTokens) {
		return false
	}
	if this.GeoZone != that1.GeoZone {
		return false
	}
	if !this.UnstakingCompletionTime.Equal(that1.UnstakingCompletionTime) {
		return false
	}
	if !bytes.Equal(this.OutputAddress, that1.OutputAddress) {
		return false
	}
	return true
}
func (this *LegacyProtoValidator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LegacyProtoValidator)
	if !ok {
		that2, ok := that.(LegacyProtoValidator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Paused != that1.Paused {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if this.ServiceURL != that1.ServiceURL {
		return false
	}
	if !this.StakedTokens.Equal(that1.StakedTokens) {
		return false
	}
	if this.GeoZone != that1.GeoZone {
		return false
	}
	if !this.UnstakingCompletionTime.Equal(that1.UnstakingCompletionTime) {
		return false
	}
	return true
}
func (this *ValidatorSigningInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorSigningInfo)
	if !ok {
		that2, ok := that.(ValidatorSigningInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !this.JailedUntil.Equal(that1.JailedUntil) {
		return false
	}
	if this.MissedBlocksCounter != that1.MissedBlocksCounter {
		return false
	}
	if this.JailedBlocksCounter != that1.JailedBlocksCounter {
		return false
	}
	if !this.PausedUntil.Equal(that1.PausedUntil) {
		return false
	}
	return true
}
func (this *ReportCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReportCard)
	if !ok {
		that2, ok := that.(ReportCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalSessions != that1.TotalSessions {
		return false
	}
	if !this.TotalLatencyScore.Equal(that1.TotalLatencyScore) {
		return false
	}
	if !this.TotalAvailabilityScore.Equal(that1.TotalAvailabilityScore) {
		return false
	}
	return true
}
func (this *ProtoValidator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&types.ProtoValidator{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Paused: "+fmt.Sprintf("%#v", this.Paused)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Chains: "+fmt.Sprintf("%#v", this.Chains)+",\n")
	s = append(s, "ServiceURL: "+fmt.Sprintf("%#v", this.ServiceURL)+",\n")
	s = append(s, "StakedTokens: "+fmt.Sprintf("%#v", this.StakedTokens)+",\n")
	s = append(s, "GeoZone: "+fmt.Sprintf("%#v", this.GeoZone)+",\n")
	s = append(s, "UnstakingCompletionTime: "+fmt.Sprintf("%#v", this.UnstakingCompletionTime)+",\n")
	s = append(s, "OutputAddress: "+fmt.Sprintf("%#v", this.OutputAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LegacyProtoValidator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&types.LegacyProtoValidator{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Paused: "+fmt.Sprintf("%#v", this.Paused)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Chains: "+fmt.Sprintf("%#v", this.Chains)+",\n")
	s = append(s, "ServiceURL: "+fmt.Sprintf("%#v", this.ServiceURL)+",\n")
	s = append(s, "StakedTokens: "+fmt.Sprintf("%#v", this.StakedTokens)+",\n")
	s = append(s, "GeoZone: "+fmt.Sprintf("%#v", this.GeoZone)+",\n")
	s = append(s, "UnstakingCompletionTime: "+fmt.Sprintf("%#v", this.UnstakingCompletionTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ValidatorSigningInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&types.ValidatorSigningInfo{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "StartHeight: "+fmt.Sprintf("%#v", this.StartHeight)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "JailedUntil: "+fmt.Sprintf("%#v", this.JailedUntil)+",\n")
	s = append(s, "MissedBlocksCounter: "+fmt.Sprintf("%#v", this.MissedBlocksCounter)+",\n")
	s = append(s, "JailedBlocksCounter: "+fmt.Sprintf("%#v", this.JailedBlocksCounter)+",\n")
	s = append(s, "PausedUntil: "+fmt.Sprintf("%#v", this.PausedUntil)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportCard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.ReportCard{")
	s = append(s, "TotalSessions: "+fmt.Sprintf("%#v", this.TotalSessions)+",\n")
	s = append(s, "TotalLatencyScore: "+fmt.Sprintf("%#v", this.TotalLatencyScore)+",\n")
	s = append(s, "TotalAvailabilityScore: "+fmt.Sprintf("%#v", this.TotalAvailabilityScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServicers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProtoValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputAddress) > 0 {
		i -= len(m.OutputAddress)
		copy(dAtA[i:], m.OutputAddress)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.OutputAddress)))
		i--
		dAtA[i] = 0x5a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintServicers(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	if len(m.GeoZone) > 0 {
		i -= len(m.GeoZone)
		copy(dAtA[i:], m.GeoZone)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.GeoZone)))
		i--
		dAtA[i] = 0x4a
	}
	i -= n1
	i = encodeVarintServicers(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	{
		size := m.StakedTokens.Size()
		i -= size
		if _, err := m.StakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintServicers(dAtA, i, uint64(size))
	}
	if len(m.ServiceURL) > 0 {
		i -= len(m.ServiceURL)
		copy(dAtA[i:], m.ServiceURL)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.ServiceURL)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintServicers(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegacyProtoValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyProtoValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyProtoValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintServicers(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	if len(m.GeoZone) > 0 {
		i -= len(m.GeoZone)
		copy(dAtA[i:], m.GeoZone)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.GeoZone)))
		i--
		dAtA[i] = 0x4a
	}
	i -= n2
	i = encodeVarintServicers(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	{
		size := m.StakedTokens.Size()
		i -= size
		if _, err := m.StakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintServicers(dAtA, i, uint64(size))
	}
	if len(m.ServiceURL) > 0 {
		i -= len(m.ServiceURL)
		copy(dAtA[i:], m.ServiceURL)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.ServiceURL)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintServicers(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Status != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSigningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSigningInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSigningInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PausedUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PausedUntil):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintServicers(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if m.JailedBlocksCounter != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.JailedBlocksCounter))
		i--
		dAtA[i] = 0x30
	}
	if m.MissedBlocksCounter != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.MissedBlocksCounter))
		i--
		dAtA[i] = 0x28
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.JailedUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.JailedUntil):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintServicers(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if m.Index != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintServicers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	
	{
		size, err := m.TotalAvailabilityScore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServicers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a  

	{
		size, err := m.TotalLatencyScore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServicers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12 
	if m.TotalSessions != 0 {
		i = encodeVarintServicers(dAtA, i, uint64(m.TotalSessions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Valset) > 0 {
		for iNdEx := len(m.Valset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Valset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServicers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintServicers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintServicers(dAtA []byte, offset int, v uint64) int {
	offset -= sovServicers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtoValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Paused {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovServicers(uint64(m.Status))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovServicers(uint64(l))
		}
	}
	l = len(m.ServiceURL)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = m.StakedTokens.Size()
	n += 1 + l + sovServicers(uint64(l))
	l = len(m.GeoZone)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovServicers(uint64(l))
	l = len(m.OutputAddress)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	return n
}

func (m *LegacyProtoValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Paused {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovServicers(uint64(m.Status))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovServicers(uint64(l))
		}
	}
	l = len(m.ServiceURL)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = m.StakedTokens.Size()
	n += 1 + l + sovServicers(uint64(l))
	l = len(m.GeoZone)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovServicers(uint64(l))
	return n
}

func (m *ValidatorSigningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovServicers(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovServicers(uint64(m.StartHeight))
	}
	if m.Index != 0 {
		n += 1 + sovServicers(uint64(m.Index))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.JailedUntil)
	n += 1 + l + sovServicers(uint64(l))
	if m.MissedBlocksCounter != 0 {
		n += 1 + sovServicers(uint64(m.MissedBlocksCounter))
	}
	if m.JailedBlocksCounter != 0 {
		n += 1 + sovServicers(uint64(m.JailedBlocksCounter))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PausedUntil)
	n += 1 + l + sovServicers(uint64(l))
	return n
}

func (m *ReportCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalSessions != 0 {
		n += 1 + sovServicers(uint64(m.TotalSessions))
	}
	l = m.TotalLatencyScore.Size() 
	n += 1 + l + sovServicers(uint64(l))
	l = m.TotalAvailabilityScore.Size()
	n += 1 + l + sovServicers(uint64(l))
	return n
}

func (m *HistoricalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovServicers(uint64(l))
	if len(m.Valset) > 0 {
		for _, e := range m.Valset {
			l = e.Size()
			n += 1 + l + sovServicers(uint64(l))
		}
	}
	return n
}

func sovServicers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServicers(x uint64) (n int) {
	return sovServicers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProtoValidator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtoValidator{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Paused:` + fmt.Sprintf("%v", this.Paused) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Chains:` + fmt.Sprintf("%v", this.Chains) + `,`,
		`ServiceURL:` + fmt.Sprintf("%v", this.ServiceURL) + `,`,
		`StakedTokens:` + fmt.Sprintf("%v", this.StakedTokens) + `,`,
		`GeoZone:` + fmt.Sprintf("%v", this.GeoZone) + `,`,
		`UnstakingCompletionTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnstakingCompletionTime), "Timestamp", "timestamppb.Timestamp", 1), `&`, ``, 1) + `,`,
		`OutputAddress:` + fmt.Sprintf("%v", this.OutputAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LegacyProtoValidator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LegacyProtoValidator{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Paused:` + fmt.Sprintf("%v", this.Paused) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Chains:` + fmt.Sprintf("%v", this.Chains) + `,`,
		`ServiceURL:` + fmt.Sprintf("%v", this.ServiceURL) + `,`,
		`StakedTokens:` + fmt.Sprintf("%v", this.StakedTokens) + `,`,
		`GeoZone:` + fmt.Sprintf("%v", this.GeoZone) + `,`,
		`UnstakingCompletionTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnstakingCompletionTime), "Timestamp", "timestamppb.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ValidatorSigningInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorSigningInfo{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`StartHeight:` + fmt.Sprintf("%v", this.StartHeight) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`JailedUntil:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.JailedUntil), "Timestamp", "timestamppb.Timestamp", 1), `&`, ``, 1) + `,`,
		`MissedBlocksCounter:` + fmt.Sprintf("%v", this.MissedBlocksCounter) + `,`,
		`JailedBlocksCounter:` + fmt.Sprintf("%v", this.JailedBlocksCounter) + `,`,
		`PausedUntil:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PausedUntil), "Timestamp", "timestamppb.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportCard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportCard{`,
		`TotalSessions:` + fmt.Sprintf("%v", this.TotalSessions) + `,`,
		`TotalLatencyScore:` + fmt.Sprintf("%v", this.TotalLatencyScore) + `,`,
		`TotalAvailabilityScore:` + fmt.Sprintf("%v", this.TotalAvailabilityScore) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringServicers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProtoValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputAddress = append(m.OutputAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputAddress == nil {
				m.OutputAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServicers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyProtoValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyProtoValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyProtoValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServicers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSigningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSigningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSigningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.JailedUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocksCounter", wireType)
			}
			m.MissedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedBlocksCounter", wireType)
			}
			m.JailedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JailedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PausedUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PausedUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServicers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSessions", wireType)
			}
			m.TotalSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSessions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLatencyScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLatencyScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAvailabilityScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAvailabilityScore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServicers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *HistoricalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServicers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServicers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valset = append(m.Valset, Validator{})
			if err := m.Valset[len(m.Valset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServicers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthServicers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServicers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServicers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServicers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServicers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupServicers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthServicers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthServicers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServicers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupServicers = fmt.Errorf("proto: unexpected end of group")
)
