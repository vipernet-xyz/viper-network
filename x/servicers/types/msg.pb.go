// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_vipernet_xyz_viper_network_types "github.com/vipernet-xyz/viper-network/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgProtoStake struct {
	Publickey     []byte                                              `protobuf:"bytes,1,opt,name=Publickey,proto3" json:"public_key" yaml:"public_key"`
	Chains        []string                                            `protobuf:"bytes,2,rep,name=Chains,proto3" json:"chains" yaml:"chains"`
	Value         github_com_vipernet_xyz_viper_network_types.BigInt  `protobuf:"bytes,3,opt,name=value,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"value" yaml:"value"`
	ServiceUrl    string                                              `protobuf:"bytes,4,opt,name=ServiceUrl,proto3" json:"service_url" yaml:"service_url"`
	GeoZone       []string                                              `protobuf:"bytes,5,opt,name=GeoZone,proto3" json:"geo_zone" yaml:"geo_zone"`
	OutputAddress github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,6,opt,name=OutputAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"output_address,omitempty" yaml:"output_address"`
}

func (m *MsgProtoStake) Reset()      { *m = MsgProtoStake{} }
func (*MsgProtoStake) ProtoMessage() {}
func (*MsgProtoStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}
func (m *MsgProtoStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProtoStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProtoStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProtoStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProtoStake.Merge(m, src)
}
func (m *MsgProtoStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgProtoStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProtoStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProtoStake proto.InternalMessageInfo

type MsgBeginUnstake struct {
	Address github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=Address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"validator_address" yaml:"validator_address"`
	Signer  github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=Signer,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"signer_address,omitempty" yaml:"signer_address"`
}

func (m *MsgBeginUnstake) Reset()      { *m = MsgBeginUnstake{} }
func (*MsgBeginUnstake) ProtoMessage() {}
func (*MsgBeginUnstake) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{2}
}
func (m *MsgBeginUnstake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginUnstake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginUnstake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginUnstake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginUnstake.Merge(m, src)
}
func (m *MsgBeginUnstake) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginUnstake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginUnstake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginUnstake proto.InternalMessageInfo

type MsgUnjail struct {
	ValidatorAddr github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=ValidatorAddr,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	Signer        github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=Signer,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"signer_address" yaml:"signer_address"`
}

func (m *MsgUnjail) Reset()      { *m = MsgUnjail{} }
func (*MsgUnjail) ProtoMessage() {}
func (*MsgUnjail) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{4}
}
func (m *MsgUnjail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnjail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnjail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnjail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnjail.Merge(m, src)
}
func (m *MsgUnjail) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnjail) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnjail.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnjail proto.InternalMessageInfo

type MsgSend struct {
	FromAddress github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=FromAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"from_address" yaml:"from_address"`
	ToAddress   github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=ToAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"to_address" yaml:"to_address"`
	Amount      github_com_vipernet_xyz_viper_network_types.BigInt  `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"amount" yaml:"amount"`
}

func (m *MsgSend) Reset()      { *m = MsgSend{} }
func (*MsgSend) ProtoMessage() {}
func (*MsgSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{6}
}
func (m *MsgSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSend.Merge(m, src)
}
func (m *MsgSend) XXX_Size() int {
	return m.Size()
}
func (m *MsgSend) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSend.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSend proto.InternalMessageInfo

func (m *MsgSend) GetFromAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgSend) GetToAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (*MsgSend) XXX_MessageName() string {
	return "x.servicers.MsgSend"
}

type MsgPause struct {
	ValidatorAddr github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=ValidatorAddr,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	Signer        github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=Signer,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"signer_address" yaml:"signer_address"`
}

func (m *MsgPause) Reset()      { *m = MsgPause{} }
func (*MsgPause) ProtoMessage() {}
func (*MsgPause) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{7}
}
func (m *MsgPause) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPause.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPause.Merge(m, src)
}
func (m *MsgPause) XXX_Size() int {
	return m.Size()
}
func (m *MsgPause) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPause.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPause proto.InternalMessageInfo

type MsgUnpause struct {
	ValidatorAddr github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=ValidatorAddr,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	Signer        github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=Signer,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"signer_address" yaml:"signer_address"`
}

func (m *MsgUnpause) Reset()      { *m = MsgUnpause{} }
func (*MsgUnpause) ProtoMessage() {}
func (*MsgUnpause) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{8}
}
func (m *MsgUnpause) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpause.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpause.Merge(m, src)
}
func (m *MsgUnpause) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpause) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpause.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpause proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgProtoStake)(nil), "x.servicers.MsgProtoStake")
	proto.RegisterType((*MsgBeginUnstake)(nil), "x.servicers.MsgBeginUnstake")
	proto.RegisterType((*MsgUnjail)(nil), "x.servicers.MsgUnjail")
	proto.RegisterType((*MsgSend)(nil), "x.servicers.MsgSend")
	proto.RegisterType((*MsgPause)(nil), "x.servicers.MsgPause")
	proto.RegisterType((*MsgUnpause)(nil), "x.servicers.MsgUnpause")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 763 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x6f, 0xd3, 0x4e,
	0x1c, 0xf5, 0x25, 0x6d, 0xd2, 0x5c, 0x93, 0x56, 0x75, 0xbf, 0x95, 0xac, 0x2f, 0x92, 0xaf, 0x32,
	0x42, 0xea, 0x40, 0x13, 0x89, 0x0e, 0x88, 0x6e, 0x0d, 0x02, 0x84, 0x44, 0x44, 0x95, 0x34, 0x0c,
	0x1d, 0x88, 0x9c, 0xe4, 0x70, 0x4d, 0x6c, 0x5f, 0x64, 0x9f, 0x43, 0x92, 0xa9, 0x02, 0x86, 0x8e,
	0xa5, 0x0b, 0x48, 0x2c, 0x15, 0x13, 0x82, 0x7f, 0xa4, 0x63, 0xc7, 0x8a, 0xe1, 0x44, 0xd3, 0xa5,
	0xf2, 0x54, 0x65, 0x64, 0x42, 0xf1, 0xd9, 0xf9, 0x35, 0x20, 0x48, 0xa5, 0xc2, 0xd0, 0xad, 0xf7,
	0xee, 0x73, 0xf7, 0x5e, 0xdf, 0xe7, 0xdd, 0x27, 0x86, 0x09, 0xd3, 0xd1, 0xd2, 0x75, 0x9b, 0x50,
	0x22, 0xce, 0x36, 0xd3, 0x0e, 0xb6, 0x1b, 0x7a, 0x05, 0xdb, 0xce, 0xff, 0xff, 0x69, 0x44, 0x23,
	0x3e, 0x9e, 0xe9, 0xfd, 0xc5, 0x4b, 0x94, 0xf7, 0x53, 0x30, 0x95, 0x73, 0xb4, 0xcd, 0xde, 0xa2,
	0x40, 0xd5, 0x1a, 0x16, 0x37, 0x60, 0x62, 0xd3, 0x2d, 0x1b, 0x7a, 0xa5, 0x86, 0x5b, 0x12, 0x58,
	0x06, 0x2b, 0xc9, 0xec, 0x4d, 0x8f, 0x21, 0x58, 0xf7, 0xc1, 0x52, 0x0d, 0xb7, 0xba, 0x0c, 0x2d,
	0xb4, 0x54, 0xd3, 0x58, 0x57, 0x06, 0x98, 0x92, 0x1f, 0x9c, 0x12, 0xd7, 0x60, 0xec, 0xfe, 0x8e,
	0xaa, 0x5b, 0x8e, 0x14, 0x59, 0x8e, 0xae, 0x24, 0xb2, 0x37, 0x3c, 0x86, 0x62, 0x15, 0x1f, 0xe9,
	0x32, 0x94, 0xe2, 0x67, 0xf9, 0x5a, 0xc9, 0x07, 0xa5, 0xa2, 0x0e, 0xa7, 0x1b, 0xaa, 0xe1, 0x62,
	0x29, 0xba, 0x0c, 0x56, 0x12, 0xd9, 0xc2, 0x11, 0x43, 0xc2, 0x37, 0x86, 0xee, 0x68, 0x3a, 0xdd,
	0x71, 0xcb, 0xe9, 0x0a, 0x31, 0x33, 0x0d, 0xbd, 0x8e, 0x6d, 0x0b, 0xd3, 0xd5, 0x66, 0xab, 0xcd,
	0x17, 0xab, 0x16, 0xa6, 0xaf, 0x88, 0x5d, 0xcb, 0xd0, 0x56, 0x1d, 0x3b, 0xe9, 0xac, 0xae, 0x3d,
	0xb6, 0xa8, 0xc7, 0x10, 0xbf, 0xaa, 0xcb, 0x50, 0x92, 0x93, 0xf9, 0x4b, 0x25, 0xcf, 0x61, 0xf1,
	0x01, 0x84, 0x05, 0xee, 0x4b, 0xd1, 0x36, 0xa4, 0x29, 0x9f, 0xef, 0x96, 0xc7, 0xd0, 0x6c, 0xe0,
	0x56, 0xc9, 0xb5, 0x8d, 0x2e, 0x43, 0x22, 0x3f, 0x3b, 0x04, 0x2a, 0xf9, 0xa1, 0x83, 0xe2, 0x3d,
	0x18, 0x7f, 0x84, 0xc9, 0x36, 0xb1, 0xb0, 0x34, 0xed, 0xdf, 0x81, 0x3c, 0x86, 0x66, 0x34, 0x4c,
	0x4a, 0x6d, 0x62, 0xf5, 0xc8, 0xe7, 0xf9, 0x05, 0x21, 0xa2, 0xe4, 0xc3, 0x7a, 0xf1, 0x00, 0xc0,
	0xd4, 0x53, 0x97, 0xd6, 0x5d, 0xba, 0x51, 0xad, 0xda, 0xd8, 0x71, 0xa4, 0x98, 0xef, 0xb4, 0xe1,
	0x31, 0x24, 0x11, 0x7f, 0xa3, 0xa4, 0xf2, 0x9d, 0xdb, 0xc4, 0xd4, 0x29, 0x36, 0xeb, 0xb4, 0xe7,
	0xfb, 0x12, 0xbf, 0x71, 0xb4, 0x42, 0xf9, 0xc1, 0xd0, 0xda, 0x9f, 0xd8, 0x14, 0x70, 0xe6, 0x47,
	0x25, 0xac, 0x27, 0xf7, 0x0e, 0x91, 0xf0, 0xe1, 0x10, 0x09, 0xe7, 0x87, 0x08, 0x28, 0x7b, 0x51,
	0xb8, 0xf8, 0x04, 0x6b, 0x6a, 0xa5, 0x75, 0x9d, 0x8f, 0xab, 0xce, 0xc7, 0x58, 0x2b, 0xbe, 0x46,
	0xe0, 0x7c, 0xce, 0xd1, 0xb2, 0x58, 0xd3, 0xad, 0xa2, 0xe5, 0xf8, 0x6d, 0x78, 0x0d, 0x60, 0x3c,
	0xcc, 0x0e, 0xef, 0xc2, 0x8e, 0xc7, 0xd0, 0x42, 0x43, 0x35, 0xf4, 0xaa, 0x4a, 0x89, 0x1d, 0x86,
	0xa3, 0xcb, 0x90, 0xd4, 0xff, 0x1f, 0x47, 0xb7, 0x26, 0xce, 0x4d, 0x48, 0x2c, 0xbe, 0x05, 0x30,
	0x56, 0xd0, 0x35, 0x0b, 0xdb, 0x52, 0x64, 0x90, 0x5f, 0xc7, 0x47, 0x7e, 0x95, 0xdf, 0xd1, 0x8a,
	0x89, 0x75, 0x04, 0xdc, 0x63, 0x6e, 0x7d, 0x01, 0x70, 0xa9, 0x1f, 0xdc, 0x7f, 0xce, 0xb3, 0x31,
	0xb1, 0xef, 0x22, 0x30, 0x91, 0x73, 0xb4, 0xa2, 0xf5, 0x52, 0xd5, 0x0d, 0xb1, 0x0d, 0x53, 0xcf,
	0x42, 0xc6, 0x5e, 0x7d, 0xa0, 0x72, 0xcb, 0x63, 0x28, 0x3e, 0xd0, 0x36, 0xc7, 0xb5, 0x5d, 0xfa,
	0xf5, 0x8f, 0x50, 0x89, 0xed, 0xb1, 0x56, 0x96, 0x3d, 0x86, 0xe6, 0x46, 0x1b, 0x75, 0x45, 0x0d,
	0xfc, 0x08, 0xe0, 0x7c, 0xbf, 0x81, 0x7f, 0xdf, 0x99, 0x31, 0x75, 0x6f, 0xa2, 0x30, 0x9e, 0x73,
	0xb4, 0x02, 0xb6, 0xaa, 0xe2, 0x2e, 0x80, 0xb3, 0x0f, 0x6d, 0x62, 0x8e, 0x86, 0xea, 0xb9, 0xc7,
	0x50, 0xf2, 0x85, 0x4d, 0xcc, 0x21, 0xdf, 0x16, 0xb9, 0xb2, 0x61, 0x74, 0x62, 0x79, 0xc3, 0x94,
	0x62, 0x13, 0x26, 0xb6, 0x48, 0xc8, 0xcf, 0x3b, 0xb7, 0xdd, 0x1b, 0xc7, 0x94, 0x0c, 0xb1, 0x07,
	0xe3, 0x78, 0x80, 0x4d, 0xcc, 0x3d, 0x20, 0x13, 0x4d, 0x18, 0x53, 0x4d, 0xe2, 0x5a, 0x34, 0x98,
	0xc8, 0xc5, 0x4b, 0x4d, 0xe4, 0xe0, 0xae, 0xc1, 0xfc, 0xe7, 0x6b, 0x25, 0x1f, 0x6c, 0xac, 0x27,
	0xc3, 0x0e, 0xec, 0x7d, 0x42, 0x40, 0xd9, 0x8f, 0xc0, 0x99, 0xde, 0xef, 0x92, 0xea, 0x3a, 0xf8,
	0xfa, 0xd9, 0xf8, 0xc1, 0x3c, 0x88, 0x40, 0xe8, 0x3f, 0x98, 0xfa, 0xb5, 0x29, 0xa1, 0x29, 0x59,
	0xf3, 0xf8, 0x54, 0x16, 0x4e, 0x4e, 0x65, 0xe1, 0xe2, 0x54, 0x06, 0xbb, 0x1d, 0x19, 0x7c, 0xee,
	0xc8, 0xe0, 0xa8, 0x23, 0x83, 0xe3, 0x8e, 0x0c, 0xbe, 0x77, 0x64, 0x70, 0xde, 0x91, 0x85, 0x8b,
	0x8e, 0x0c, 0xf6, 0xcf, 0x64, 0xe1, 0xf8, 0x4c, 0x16, 0x4e, 0xce, 0x64, 0x61, 0xfb, 0xee, 0xef,
	0x09, 0x68, 0x66, 0xfa, 0x9f, 0xd7, 0x5c, 0x4c, 0x39, 0xe6, 0x7f, 0x55, 0xaf, 0xfd, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0x9e, 0x03, 0xa2, 0x88, 0x85, 0x0b, 0x00, 0x00,
}

func (this *MsgProtoStake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgProtoStake)
	if !ok {
		that2, ok := that.(MsgProtoStake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Publickey, that1.Publickey) {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if this.ServiceUrl != that1.ServiceUrl {
		return false
	}
	if len(this.GeoZone) != len(that1.GeoZone) {
		return false
	}
	for i := range this.GeoZone {
		if this.GeoZone[i] != that1.GeoZone[i] {
			return false
		}
	}
	if !bytes.Equal(this.OutputAddress, that1.OutputAddress) {
		return false
	}
	return true
}
func (this *MsgBeginUnstake) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBeginUnstake)
	if !ok {
		that2, ok := that.(MsgBeginUnstake)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	return true
}
func (this *MsgUnjail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUnjail)
	if !ok {
		that2, ok := that.(MsgUnjail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ValidatorAddr, that1.ValidatorAddr) {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	return true
}
func (this *MsgSend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSend)
	if !ok {
		that2, ok := that.(MsgSend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FromAddress, that1.FromAddress) {
		return false
	}
	if !bytes.Equal(this.ToAddress, that1.ToAddress) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *MsgPause) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgPause)
	if !ok {
		that2, ok := that.(MsgPause)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ValidatorAddr, that1.ValidatorAddr) {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	return true
}
func (this *MsgUnpause) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUnpause)
	if !ok {
		that2, ok := that.(MsgUnpause)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ValidatorAddr, that1.ValidatorAddr) {
		return false
	}
	if !bytes.Equal(this.Signer, that1.Signer) {
		return false
	}
	return true
}
func (this *MsgProtoStake) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&types.MsgProtoStake{")
	s = append(s, "Publickey: "+fmt.Sprintf("%#v", this.Publickey)+",\n")
	s = append(s, "Chains: "+fmt.Sprintf("%#v", this.Chains)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "ServiceUrl: "+fmt.Sprintf("%#v", this.ServiceUrl)+",\n")
	s = append(s, "GeoZone: "+fmt.Sprintf("%#v", this.GeoZone)+",\n")
	s = append(s, "OutputAddress: "+fmt.Sprintf("%#v", this.OutputAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgBeginUnstake) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.MsgBeginUnstake{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Signer: "+fmt.Sprintf("%#v", this.Signer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgUnjail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.MsgUnjail{")
	s = append(s, "ValidatorAddr: "+fmt.Sprintf("%#v", this.ValidatorAddr)+",\n")
	s = append(s, "Signer: "+fmt.Sprintf("%#v", this.Signer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgSend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.MsgSend{")
	s = append(s, "FromAddress: "+fmt.Sprintf("%#v", this.FromAddress)+",\n")
	s = append(s, "ToAddress: "+fmt.Sprintf("%#v", this.ToAddress)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgPause) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.MsgPause{")
	s = append(s, "ValidatorAddr: "+fmt.Sprintf("%#v", this.ValidatorAddr)+",\n")
	s = append(s, "Signer: "+fmt.Sprintf("%#v", this.Signer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgUnpause) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.MsgUnpause{")
	s = append(s, "ValidatorAddr: "+fmt.Sprintf("%#v", this.ValidatorAddr)+",\n")
	s = append(s, "Signer: "+fmt.Sprintf("%#v", this.Signer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MsgProtoStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProtoStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProtoStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputAddress) > 0 {
		i -= len(m.OutputAddress)
		copy(dAtA[i:], m.OutputAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.OutputAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GeoZone) > 0 {
		for iNdEx := len(m.GeoZone) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GeoZone[iNdEx])
			copy(dAtA[i:], m.GeoZone[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.GeoZone[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ServiceUrl) > 0 {
		i -= len(m.ServiceUrl)
		copy(dAtA[i:], m.ServiceUrl)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ServiceUrl)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintMsg(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Publickey) > 0 {
		i -= len(m.Publickey)
		copy(dAtA[i:], m.Publickey)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Publickey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginUnstake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginUnstake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginUnstake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnjail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnjail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnjail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPause) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPause) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpause) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpause) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpause) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgProtoStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Publickey)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	l = m.Value.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = len(m.ServiceUrl)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if len(m.GeoZone) > 0 {
		for _, s := range m.GeoZone {
			l = len(s)
			n += 1 + l + sovMsg(uint64(l))
		}
	}
	l = len(m.OutputAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgBeginUnstake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgUnjail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgPause) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func (m *MsgUnpause) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MsgProtoStake) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgProtoStake{`,
		`Publickey:` + fmt.Sprintf("%v", this.Publickey) + `,`,
		`Chains:` + fmt.Sprintf("%v", this.Chains) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`ServiceUrl:` + fmt.Sprintf("%v", this.ServiceUrl) + `,`,
		`GeoZone:` + fmt.Sprintf("%v", this.GeoZone) + `,`,
		`OutputAddress:` + fmt.Sprintf("%v", this.OutputAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgBeginUnstake) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgBeginUnstake{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgUnjail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgUnjail{`,
		`ValidatorAddr:` + fmt.Sprintf("%v", this.ValidatorAddr) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgSend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgSend{`,
		`FromAddress:` + fmt.Sprintf("%v", this.FromAddress) + `,`,
		`ToAddress:` + fmt.Sprintf("%v", this.ToAddress) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgPause) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgPause{`,
		`ValidatorAddr:` + fmt.Sprintf("%v", this.ValidatorAddr) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgUnpause) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgUnpause{`,
		`ValidatorAddr:` + fmt.Sprintf("%v", this.ValidatorAddr) + `,`,
		`Signer:` + fmt.Sprintf("%v", this.Signer) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MsgProtoStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProtoStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProtoStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publickey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Publickey = append(m.Publickey[:0], dAtA[iNdEx:postIndex]...)
			if m.Publickey == nil {
				m.Publickey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoZone = append(m.GeoZone, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputAddress = append(m.OutputAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputAddress == nil {
				m.OutputAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginUnstake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginUnstake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginUnstake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnjail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnjail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnjail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = append(m.ValidatorAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddr == nil {
				m.ValidatorAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = append(m.ValidatorAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddr == nil {
				m.ValidatorAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpause) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpause: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpause: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = append(m.ValidatorAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorAddr == nil {
				m.ValidatorAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
