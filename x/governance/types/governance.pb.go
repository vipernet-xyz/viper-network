// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: governance.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_vipernet_xyz_viper_network_types "github.com/vipernet-xyz/viper-network/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgChangeParam struct {
	FromAddress github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address"`
	ParamKey    string                                              `protobuf:"bytes,2,opt,name=paramKey,proto3" json:"param_key"`
	ParamVal    []byte                                              `protobuf:"bytes,3,opt,name=paramVal,proto3" json:"param_value"`
}

func (m *MsgChangeParam) Reset()      { *m = MsgChangeParam{} }
func (*MsgChangeParam) ProtoMessage() {}
func (*MsgChangeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{0}
}
func (m *MsgChangeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeParam.Merge(m, src)
}
func (m *MsgChangeParam) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeParam.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeParam proto.InternalMessageInfo

func (m *MsgChangeParam) GetFromAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgChangeParam) GetParamKey() string {
	if m != nil {
		return m.ParamKey
	}
	return ""
}

func (m *MsgChangeParam) GetParamVal() []byte {
	if m != nil {
		return m.ParamVal
	}
	return nil
}

func (*MsgChangeParam) XXX_MessageName() string {
	return "x.governance.MsgChangeParam"
}

type MsgDAOTransfer struct {
	FromAddress github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"from_address"`
	ToAddress   github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=toAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"to_address"`
	Amount      github_com_vipernet_xyz_viper_network_types.BigInt  `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"amount"`
	Action      string                                              `protobuf:"bytes,4,opt,name=action,proto3" json:"action"`
}

func (m *MsgDAOTransfer) Reset()      { *m = MsgDAOTransfer{} }
func (*MsgDAOTransfer) ProtoMessage() {}
func (*MsgDAOTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{1}
}
func (m *MsgDAOTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDAOTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDAOTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDAOTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDAOTransfer.Merge(m, src)
}
func (m *MsgDAOTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgDAOTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDAOTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDAOTransfer proto.InternalMessageInfo

func (m *MsgDAOTransfer) GetFromAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgDAOTransfer) GetToAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *MsgDAOTransfer) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (*MsgDAOTransfer) XXX_MessageName() string {
	return "x.governance.MsgDAOTransfer"
}

type MsgUpgrade struct {
	Address github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address"`
	Upgrade Upgrade                                             `protobuf:"bytes,2,opt,name=upgrade,proto3" json:"upgrade"`
}

func (m *MsgUpgrade) Reset()      { *m = MsgUpgrade{} }
func (*MsgUpgrade) ProtoMessage() {}
func (*MsgUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{2}
}
func (m *MsgUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgrade.Merge(m, src)
}
func (m *MsgUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgrade proto.InternalMessageInfo

func (m *MsgUpgrade) GetAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgUpgrade) GetUpgrade() Upgrade {
	if m != nil {
		return m.Upgrade
	}
	return Upgrade{}
}

func (*MsgUpgrade) XXX_MessageName() string {
	return "x.governance.MsgUpgrade"
}

type Upgrade struct {
	Height           int64    `protobuf:"varint,1,opt,name=height,proto3" json:"Height"`
	Version          string   `protobuf:"bytes,2,opt,name=version,proto3" json:"Version"`
	OldUpgradeHeight int64    `protobuf:"varint,3,opt,name=oldUpgradeHeight,proto3" json:"OldUpgradeHeight,omitempty"`
	Features         []string `protobuf:"bytes,4,rep,name=features,proto3" json:"Features,omitempty"`
}

func (m *Upgrade) Reset()      { *m = Upgrade{} }
func (*Upgrade) ProtoMessage() {}
func (*Upgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{3}
}
func (m *Upgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Upgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Upgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Upgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upgrade.Merge(m, src)
}
func (m *Upgrade) XXX_Size() int {
	return m.Size()
}
func (m *Upgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_Upgrade.DiscardUnknown(m)
}

var xxx_messageInfo_Upgrade proto.InternalMessageInfo

func (m *Upgrade) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Upgrade) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Upgrade) GetOldUpgradeHeight() int64 {
	if m != nil {
		return m.OldUpgradeHeight
	}
	return 0
}

func (m *Upgrade) GetFeatures() []string {
	if m != nil {
		return m.Features
	}
	return nil
}

type ACLPair struct {
	Key  string                                              `protobuf:"bytes,1,opt,name=key,proto3" json:"acl_key"`
	Addr github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=addr,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address"`
}

func (m *ACLPair) Reset()      { *m = ACLPair{} }
func (*ACLPair) ProtoMessage() {}
func (*ACLPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{4}
}
func (m *ACLPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLPair.Merge(m, src)
}
func (m *ACLPair) XXX_Size() int {
	return m.Size()
}
func (m *ACLPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLPair.DiscardUnknown(m)
}

var xxx_messageInfo_ACLPair proto.InternalMessageInfo

func (m *ACLPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ACLPair) GetAddr() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.Addr
	}
	return nil
}

type MsgGenerateDiscountKey struct {
	FromAddress github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,1,opt,name=fromAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"from_address"`
	ToAddress   github_com_vipernet_xyz_viper_network_types.Address `protobuf:"bytes,2,opt,name=toAddress,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"to_address"`
	DiscountKey string                                              `protobuf:"bytes,3,opt,name=discountKey,proto3" json:"discount_key"`
}

func (m *MsgGenerateDiscountKey) Reset()      { *m = MsgGenerateDiscountKey{} }
func (*MsgGenerateDiscountKey) ProtoMessage() {}
func (*MsgGenerateDiscountKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18a03da5266c714, []int{5}
}
func (m *MsgGenerateDiscountKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGenerateDiscountKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGenerateDiscountKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGenerateDiscountKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGenerateDiscountKey.Merge(m, src)
}
func (m *MsgGenerateDiscountKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgGenerateDiscountKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGenerateDiscountKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGenerateDiscountKey proto.InternalMessageInfo

func (m *MsgGenerateDiscountKey) GetFromAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *MsgGenerateDiscountKey) GetToAddress() github_com_vipernet_xyz_viper_network_types.Address {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *MsgGenerateDiscountKey) GetDiscountKey() string {
	if m != nil {
		return m.DiscountKey
	}
	return ""
}

func (*MsgGenerateDiscountKey) XXX_MessageName() string {
	return "x.governance.MsgGenerateDiscountKey"
}
func init() {
	proto.RegisterType((*MsgChangeParam)(nil), "x.governance.MsgChangeParam")
	proto.RegisterType((*MsgDAOTransfer)(nil), "x.governance.MsgDAOTransfer")
	proto.RegisterType((*MsgUpgrade)(nil), "x.governance.MsgUpgrade")
	proto.RegisterType((*Upgrade)(nil), "x.governance.Upgrade")
	proto.RegisterType((*ACLPair)(nil), "x.governance.ACLPair")
	proto.RegisterType((*MsgGenerateDiscountKey)(nil), "x.governance.MsgGenerateDiscountKey")
}

func init() { proto.RegisterFile("governance.proto", fileDescriptor_e18a03da5266c714) }

var fileDescriptor_e18a03da5266c714 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x54, 0xbf, 0x4f, 0x1b, 0x3f,
	0x14, 0x3f, 0x27, 0x51, 0x42, 0x1c, 0xbe, 0x5f, 0x90, 0xd5, 0xa2, 0x08, 0xa9, 0x36, 0x8a, 0x54,
	0x89, 0xaa, 0x25, 0x91, 0xc2, 0x52, 0x75, 0x2a, 0x07, 0x2d, 0xfd, 0x85, 0x40, 0xa7, 0x96, 0xa1,
	0x42, 0x42, 0x26, 0x31, 0x97, 0x13, 0xc9, 0x39, 0xf2, 0x39, 0x29, 0xd7, 0x89, 0xb1, 0x63, 0xff,
	0x06, 0xa6, 0xce, 0xfd, 0x2b, 0x18, 0x19, 0x18, 0x50, 0x87, 0x53, 0x39, 0x16, 0x74, 0x13, 0x73,
	0xa7, 0xca, 0x3e, 0x1f, 0x89, 0xda, 0x0e, 0xad, 0x9a, 0xa9, 0xd3, 0x39, 0x9f, 0xf7, 0xf1, 0xe7,
	0x7d, 0xde, 0xf3, 0x7b, 0x81, 0xb3, 0x2e, 0x1f, 0x32, 0xe1, 0x53, 0xbf, 0xc5, 0xea, 0x7d, 0xc1,
	0x25, 0x47, 0xd3, 0x87, 0xf5, 0x11, 0x36, 0x7f, 0xcb, 0xe5, 0x2e, 0xd7, 0x81, 0x86, 0x3a, 0xa5,
	0x9c, 0xda, 0x19, 0x80, 0xff, 0x6f, 0x04, 0xee, 0x6a, 0x87, 0xfa, 0x2e, 0xdb, 0xa2, 0x82, 0xf6,
	0x50, 0x1b, 0x56, 0xf6, 0x05, 0xef, 0xad, 0xb4, 0xdb, 0x82, 0x05, 0x41, 0x15, 0x2c, 0x80, 0xc5,
	0x69, 0xdb, 0x4e, 0x22, 0x52, 0xa2, 0x29, 0xf4, 0x2d, 0x22, 0xcb, 0xae, 0x27, 0x3b, 0x83, 0xbd,
	0x7a, 0x8b, 0xf7, 0x1a, 0x43, 0xaf, 0xcf, 0x84, 0xcf, 0xe4, 0xd2, 0x61, 0xf8, 0x3e, 0xfd, 0xb1,
	0xe4, 0x33, 0xf9, 0x8e, 0x8b, 0x83, 0x86, 0x0c, 0xfb, 0x2c, 0xa8, 0x1b, 0x25, 0x67, 0x5c, 0x16,
	0xdd, 0x83, 0x53, 0x7d, 0x95, 0xee, 0x25, 0x0b, 0xab, 0xb9, 0x05, 0xb0, 0x58, 0xb6, 0xff, 0x4b,
	0x22, 0x52, 0xd6, 0xd8, 0xee, 0x01, 0x0b, 0x9d, 0x9b, 0x30, 0xba, 0x6f, 0xa8, 0xdb, 0xb4, 0x5b,
	0xcd, 0x6b, 0x37, 0x33, 0x49, 0x44, 0x2a, 0x29, 0x75, 0x48, 0xbb, 0x03, 0xe6, 0xdc, 0x10, 0x1e,
	0x15, 0x3e, 0x1c, 0x13, 0x50, 0xbb, 0xca, 0xe9, 0xb2, 0xd6, 0x56, 0x36, 0x5f, 0x0b, 0xea, 0x07,
	0xfb, 0x4c, 0x20, 0xef, 0x57, 0x65, 0xad, 0x27, 0x11, 0x99, 0x56, 0xf0, 0xee, 0x24, 0x6b, 0x6b,
	0xc1, 0xb2, 0xe4, 0x59, 0xa2, 0x9c, 0x4e, 0xf4, 0x24, 0x89, 0x08, 0x94, 0xfc, 0x6f, 0xd3, 0x8c,
	0x74, 0xd1, 0x0e, 0x2c, 0xd2, 0x1e, 0x1f, 0xf8, 0x52, 0xf7, 0xa4, 0x6c, 0xaf, 0x9d, 0x44, 0xc4,
	0xfa, 0x12, 0x91, 0xe6, 0x9f, 0xe8, 0xda, 0x9e, 0xfb, 0xdc, 0x97, 0x49, 0x44, 0x8c, 0x96, 0x63,
	0xbe, 0xa8, 0x06, 0x8b, 0xb4, 0x25, 0x3d, 0xee, 0x57, 0x0b, 0x5a, 0x1d, 0x6a, 0x8e, 0x46, 0x1c,
	0xf3, 0x35, 0xad, 0xfe, 0x0c, 0x20, 0xdc, 0x08, 0xdc, 0x37, 0x7d, 0x57, 0xd0, 0x36, 0x43, 0x3b,
	0x30, 0x1b, 0x93, 0x09, 0x4e, 0x4e, 0x76, 0x1f, 0x3d, 0x86, 0xa5, 0x41, 0x9a, 0x48, 0xf7, 0xb5,
	0xd2, 0xbc, 0x5d, 0x1f, 0x1f, 0xf2, 0xba, 0x71, 0x61, 0xcf, 0xa8, 0x66, 0xa8, 0xc4, 0x86, 0xed,
	0x64, 0x07, 0x63, 0xfa, 0x0c, 0xc0, 0x52, 0xe6, 0xb8, 0x06, 0x8b, 0x1d, 0xe6, 0xb9, 0x1d, 0xa9,
	0x0d, 0xe7, 0xd3, 0x52, 0x9f, 0x69, 0xc4, 0x31, 0x11, 0x74, 0x17, 0x96, 0x86, 0x4c, 0x04, 0xaa,
	0x1f, 0xe9, 0xb0, 0x56, 0x94, 0xf8, 0x76, 0x0a, 0x39, 0x59, 0x0c, 0xbd, 0x80, 0xb3, 0xbc, 0xdb,
	0x36, 0xc2, 0xa9, 0x84, 0x7e, 0x9d, 0xbc, 0x8d, 0x93, 0x88, 0xcc, 0x6f, 0xfe, 0x10, 0x7b, 0xc0,
	0x7b, 0x9e, 0x64, 0xbd, 0xbe, 0x0c, 0x9d, 0x9f, 0xee, 0xa1, 0x26, 0x9c, 0xda, 0x67, 0x54, 0x0e,
	0x04, 0x0b, 0xaa, 0x85, 0x85, 0xfc, 0x62, 0xd9, 0x9e, 0x4b, 0x22, 0x82, 0x9e, 0x1a, 0x6c, 0xec,
	0xee, 0x0d, 0xaf, 0x76, 0x04, 0x60, 0x69, 0x65, 0xf5, 0xd5, 0x16, 0xf5, 0x04, 0xba, 0x03, 0xf3,
	0x07, 0x2c, 0xd4, 0x35, 0x19, 0xbb, 0xb4, 0xd5, 0xd5, 0x9b, 0xa5, 0x70, 0xb4, 0x0d, 0x0b, 0xaa,
	0xa9, 0x66, 0x3c, 0x27, 0xf1, 0x48, 0x5a, 0xaf, 0x76, 0x9c, 0x83, 0x73, 0x1b, 0x81, 0xbb, 0xce,
	0x7c, 0x26, 0xa8, 0x64, 0x6b, 0x5e, 0xd0, 0x52, 0x03, 0xa5, 0xf6, 0xf8, 0x5f, 0xdb, 0xc0, 0x26,
	0xac, 0xb4, 0x47, 0xe5, 0x99, 0x35, 0x9c, 0x55, 0xf5, 0x64, 0xb0, 0x6e, 0xf7, 0x38, 0x29, 0x1d,
	0x3f, 0xdb, 0x3f, 0xbd, 0xc0, 0xd6, 0xf9, 0x05, 0xb6, 0xae, 0x2f, 0x30, 0x38, 0x8a, 0x31, 0xf8,
	0x14, 0x63, 0x70, 0x12, 0x63, 0x70, 0x1a, 0x63, 0xf0, 0x35, 0xc6, 0xe0, 0x2a, 0xc6, 0xd6, 0x75,
	0x8c, 0xc1, 0xc7, 0x4b, 0x6c, 0x9d, 0x5e, 0x62, 0xeb, 0xfc, 0x12, 0x5b, 0x6f, 0x1f, 0xfe, 0x9e,
	0xdf, 0xc3, 0xc6, 0x68, 0x21, 0x52, 0xf3, 0x7b, 0x45, 0xfd, 0x67, 0xbf, 0xfc, 0x3d, 0x00, 0x00,
	0xff, 0xff, 0x82, 0x65, 0xda, 0x74, 0x24, 0x06, 0x00, 0x00,
}

func (this *MsgChangeParam) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgChangeParam)
	if !ok {
		that2, ok := that.(MsgChangeParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FromAddress, that1.FromAddress) {
		return false
	}
	if this.ParamKey != that1.ParamKey {
		return false
	}
	if !bytes.Equal(this.ParamVal, that1.ParamVal) {
		return false
	}
	return true
}
func (this *MsgDAOTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDAOTransfer)
	if !ok {
		that2, ok := that.(MsgDAOTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FromAddress, that1.FromAddress) {
		return false
	}
	if !bytes.Equal(this.ToAddress, that1.ToAddress) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	return true
}
func (this *MsgUpgrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpgrade)
	if !ok {
		that2, ok := that.(MsgUpgrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !this.Upgrade.Equal(&that1.Upgrade) {
		return false
	}
	return true
}
func (this *Upgrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Upgrade)
	if !ok {
		that2, ok := that.(Upgrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.OldUpgradeHeight != that1.OldUpgradeHeight {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if this.Features[i] != that1.Features[i] {
			return false
		}
	}
	return true
}
func (this *ACLPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ACLPair)
	if !ok {
		that2, ok := that.(ACLPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !bytes.Equal(this.Addr, that1.Addr) {
		return false
	}
	return true
}
func (this *MsgGenerateDiscountKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgGenerateDiscountKey)
	if !ok {
		that2, ok := that.(MsgGenerateDiscountKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FromAddress, that1.FromAddress) {
		return false
	}
	if !bytes.Equal(this.ToAddress, that1.ToAddress) {
		return false
	}
	if this.DiscountKey != that1.DiscountKey {
		return false
	}
	return true
}
func (this *MsgChangeParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.MsgChangeParam{")
	s = append(s, "FromAddress: "+fmt.Sprintf("%#v", this.FromAddress)+",\n")
	s = append(s, "ParamKey: "+fmt.Sprintf("%#v", this.ParamKey)+",\n")
	s = append(s, "ParamVal: "+fmt.Sprintf("%#v", this.ParamVal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgDAOTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.MsgDAOTransfer{")
	s = append(s, "FromAddress: "+fmt.Sprintf("%#v", this.FromAddress)+",\n")
	s = append(s, "ToAddress: "+fmt.Sprintf("%#v", this.ToAddress)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgUpgrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.MsgUpgrade{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Upgrade: "+strings.Replace(this.Upgrade.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Upgrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&types.Upgrade{")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "OldUpgradeHeight: "+fmt.Sprintf("%#v", this.OldUpgradeHeight)+",\n")
	s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ACLPair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.ACLPair{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Addr: "+fmt.Sprintf("%#v", this.Addr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MsgGenerateDiscountKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.MsgGenerateDiscountKey{")
	s = append(s, "FromAddress: "+fmt.Sprintf("%#v", this.FromAddress)+",\n")
	s = append(s, "ToAddress: "+fmt.Sprintf("%#v", this.ToAddress)+",\n")
	s = append(s, "DiscountKey: "+fmt.Sprintf("%#v", this.DiscountKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGovernance(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MsgChangeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParamVal) > 0 {
		i -= len(m.ParamVal)
		copy(dAtA[i:], m.ParamVal)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ParamVal)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParamKey) > 0 {
		i -= len(m.ParamKey)
		copy(dAtA[i:], m.ParamKey)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ParamKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDAOTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDAOTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDAOTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Upgrade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovernance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Upgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Upgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for iNdEx := len(m.Features) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Features[iNdEx])
			copy(dAtA[i:], m.Features[iNdEx])
			i = encodeVarintGovernance(dAtA, i, uint64(len(m.Features[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OldUpgradeHeight != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.OldUpgradeHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintGovernance(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACLPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACLPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGenerateDiscountKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGenerateDiscountKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGenerateDiscountKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DiscountKey) > 0 {
		i -= len(m.DiscountKey)
		copy(dAtA[i:], m.DiscountKey)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.DiscountKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintGovernance(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovernance(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovernance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgChangeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ParamKey)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ParamVal)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *MsgDAOTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGovernance(uint64(l))
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *MsgUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = m.Upgrade.Size()
	n += 1 + l + sovGovernance(uint64(l))
	return n
}

func (m *Upgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGovernance(uint64(m.Height))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	if m.OldUpgradeHeight != 0 {
		n += 1 + sovGovernance(uint64(m.OldUpgradeHeight))
	}
	if len(m.Features) > 0 {
		for _, s := range m.Features {
			l = len(s)
			n += 1 + l + sovGovernance(uint64(l))
		}
	}
	return n
}

func (m *ACLPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func (m *MsgGenerateDiscountKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	l = len(m.DiscountKey)
	if l > 0 {
		n += 1 + l + sovGovernance(uint64(l))
	}
	return n
}

func sovGovernance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovernance(x uint64) (n int) {
	return sovGovernance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MsgChangeParam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgChangeParam{`,
		`FromAddress:` + fmt.Sprintf("%v", this.FromAddress) + `,`,
		`ParamKey:` + fmt.Sprintf("%v", this.ParamKey) + `,`,
		`ParamVal:` + fmt.Sprintf("%v", this.ParamVal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgDAOTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgDAOTransfer{`,
		`FromAddress:` + fmt.Sprintf("%v", this.FromAddress) + `,`,
		`ToAddress:` + fmt.Sprintf("%v", this.ToAddress) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgUpgrade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgUpgrade{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Upgrade:` + strings.Replace(strings.Replace(this.Upgrade.String(), "Upgrade", "Upgrade", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Upgrade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Upgrade{`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`OldUpgradeHeight:` + fmt.Sprintf("%v", this.OldUpgradeHeight) + `,`,
		`Features:` + fmt.Sprintf("%v", this.Features) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ACLPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ACLPair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgGenerateDiscountKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgGenerateDiscountKey{`,
		`FromAddress:` + fmt.Sprintf("%v", this.FromAddress) + `,`,
		`ToAddress:` + fmt.Sprintf("%v", this.ToAddress) + `,`,
		`DiscountKey:` + fmt.Sprintf("%v", this.DiscountKey) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGovernance(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MsgChangeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParamVal = append(m.ParamVal[:0], dAtA[iNdEx:postIndex]...)
			if m.ParamVal == nil {
				m.ParamVal = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDAOTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDAOTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDAOTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Upgrade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Upgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUpgradeHeight", wireType)
			}
			m.OldUpgradeHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldUpgradeHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGenerateDiscountKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGenerateDiscountKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGenerateDiscountKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscountKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovernance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovernance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovernance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovernance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovernance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovernance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovernance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovernance = fmt.Errorf("proto: unexpected end of group")
)
