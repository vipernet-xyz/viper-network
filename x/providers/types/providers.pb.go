// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: providers.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_vipernet_xyz_viper_network_types "github.com/vipernet-xyz/viper-network/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Provider defines the total amount of bond shares and their exchange rate to
// coins. Slashing results in a decrease in the exchange rate, allowing correct
// calculation of future undelegations without iterating over delegators.
// When coins are delegated to this validator, the validator is credited with a
// delegation whose number of bond shares is based on the amount of coins
// delegated divided by the current exchange rate. Voting power can be
// calculated as total bonded shares multiplied by exchange rate.
type ProtoProvider struct {
	Address                 github_com_vipernet_xyz_viper_network_types.Address     `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/vipernet-xyz/viper-network/types.Address" json:"address" yaml:"address"`
	PublicKey               []byte                                                  `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key" yaml:"public_key"`
	Jailed                  bool                                                    `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed" yaml:"jailed"`
	Status                  github_com_vipernet_xyz_viper_network_types.StakeStatus `protobuf:"varint,4,opt,name=status,proto3,casttype=github.com/vipernet-xyz/viper-network/types.StakeStatus" json:"status" yaml:"status"`
	Chains                  []string                                                `protobuf:"bytes,5,rep,name=chains,proto3" json:"chains" yaml:"chains"`
	StakedTokens            github_com_vipernet_xyz_viper_network_types.BigInt      `protobuf:"bytes,6,opt,name=staked_tokens,json=stakedTokens,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"tokens" yaml:"tokens"`
	MaxRelays               github_com_vipernet_xyz_viper_network_types.BigInt      `protobuf:"bytes,7,opt,name=max_relays,json=maxRelays,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"max_relays" yaml:"max_relays"`
	GeoZones                []string                                                `protobuf:"bytes,8,rep,name=geo_zones,json=geoZones,proto3" json:"geo_zones" yaml:"geo_zones"`
	NumServicers            int32                                                   `protobuf:"varint,9,opt,name=num_servicers,json=numServicers,proto3" json:"num_servicers" yaml:"num_servicers"`
	UnstakingCompletionTime time.Time                                               `protobuf:"bytes,10,opt,name=unstaking_completion_time,json=unstakingCompletionTime,proto3,stdtime" json:"unstaking_time" yaml:"unstaking_time"`
}

func (m *ProtoProvider) Reset()      { *m = ProtoProvider{} }
func (*ProtoProvider) ProtoMessage() {}
func (*ProtoProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{0}
}
func (m *ProtoProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoProvider.Merge(m, src)
}
func (m *ProtoProvider) XXX_Size() int {
	return m.Size()
}
func (m *ProtoProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoProvider proto.InternalMessageInfo

// Pool - tracking bonded and not-bonded token supply of the bond denomination
type Pool struct {
	Tokens github_com_vipernet_xyz_viper_network_types.BigInt `protobuf:"bytes,1,opt,name=tokens,proto3,customtype=github.com/vipernet-xyz/viper-network/types.BigInt" json:"tokens"`
}

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9f7cb8e43f784d4, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProtoProvider)(nil), "x.providers.ProtoProvider")
	proto.RegisterType((*Pool)(nil), "x.providers.Pool")
}

func init() { proto.RegisterFile("providers.proto", fileDescriptor_f9f7cb8e43f784d4) }

var fileDescriptor_f9f7cb8e43f784d4 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xb1, 0x6f, 0xd3, 0x4c,
	0x18, 0xc6, 0x7d, 0x5f, 0xdb, 0x34, 0xbe, 0x36, 0xfd, 0xbe, 0xcf, 0x2a, 0xc2, 0x14, 0xc9, 0x17,
	0xcc, 0x12, 0x86, 0x3a, 0x52, 0x33, 0x20, 0x65, 0x40, 0xc2, 0x4c, 0x08, 0x09, 0x55, 0x6e, 0x61,
	0xa8, 0x84, 0x2c, 0x27, 0x39, 0x5c, 0x13, 0xdb, 0x67, 0xf9, 0xce, 0x25, 0xa9, 0x18, 0x18, 0x91,
	0x58, 0xfa, 0x27, 0x74, 0xe4, 0xbf, 0x60, 0xed, 0xd8, 0xb1, 0x62, 0x38, 0xa8, 0xbb, 0x54, 0x99,
	0xaa, 0x8c, 0x4c, 0xe8, 0x7c, 0x4e, 0xdc, 0x6e, 0x14, 0xb6, 0x7b, 0x7e, 0xe7, 0xf7, 0x79, 0xee,
	0xee, 0xd5, 0x6b, 0xf8, 0x6f, 0x92, 0x92, 0x83, 0x60, 0x80, 0x53, 0x6a, 0x25, 0x29, 0x61, 0x44,
	0x5b, 0x19, 0x59, 0x73, 0xb4, 0xb1, 0xee, 0x13, 0x9f, 0x14, 0xbc, 0x2d, 0x56, 0xf2, 0x93, 0x0d,
	0xe4, 0x13, 0xe2, 0x87, 0xb8, 0x5d, 0xa8, 0x5e, 0xf6, 0xb6, 0xcd, 0x82, 0x08, 0x53, 0xe6, 0x45,
	0x89, 0xfc, 0xc0, 0xfc, 0xba, 0x0c, 0x1b, 0xdb, 0x62, 0xb5, 0x5d, 0x3a, 0x69, 0x31, 0x5c, 0xf6,
	0x06, 0x83, 0x14, 0x53, 0xaa, 0x83, 0x26, 0x68, 0xad, 0xda, 0xbb, 0x13, 0x8e, 0x66, 0x68, 0xca,
	0xd1, 0xda, 0xd8, 0x8b, 0xc2, 0xae, 0x59, 0x02, 0xf3, 0x27, 0x47, 0x1d, 0x3f, 0x60, 0xfb, 0x59,
	0xcf, 0xea, 0x93, 0xa8, 0x7d, 0x10, 0x24, 0x38, 0x8d, 0x31, 0xdb, 0x1c, 0x8d, 0x0f, 0xa5, 0xd8,
	0x8c, 0x31, 0x7b, 0x4f, 0xd2, 0x61, 0x9b, 0x8d, 0x13, 0x4c, 0xad, 0xa7, 0xb2, 0xce, 0x99, 0x39,
	0x6a, 0x36, 0x84, 0x49, 0xd6, 0x0b, 0x83, 0xbe, 0x3b, 0xc4, 0x63, 0xfd, 0x9f, 0x22, 0xf2, 0xe1,
	0x84, 0xa3, 0x6b, 0x74, 0xca, 0xd1, 0xff, 0x32, 0xb5, 0x62, 0xa6, 0xa3, 0x4a, 0xf1, 0x02, 0x8f,
	0xb5, 0x0e, 0xac, 0xbd, 0xf3, 0x82, 0x10, 0x0f, 0xf4, 0x85, 0x26, 0x68, 0xd5, 0xed, 0xfb, 0x13,
	0x8e, 0x4a, 0x32, 0xe5, 0xa8, 0x21, 0x6b, 0xa5, 0x36, 0x9d, 0x72, 0x43, 0x8b, 0x61, 0x8d, 0x32,
	0x8f, 0x65, 0x54, 0x5f, 0x6c, 0x82, 0xd6, 0x92, 0xfd, 0x5a, 0x14, 0x49, 0x52, 0x15, 0x49, 0x2d,
	0x6e, 0xf9, 0xf8, 0x36, 0xb7, 0xdc, 0x61, 0xde, 0x10, 0xef, 0x14, 0xb5, 0x4e, 0xe9, 0x29, 0x0e,
	0xd9, 0xdf, 0xf7, 0x82, 0x98, 0xea, 0x4b, 0xcd, 0x85, 0x96, 0x2a, 0x0f, 0x29, 0x49, 0x95, 0x27,
	0xb5, 0xe9, 0x94, 0x1b, 0xda, 0x21, 0x6c, 0x50, 0xe1, 0x35, 0x70, 0x19, 0x19, 0xe2, 0x98, 0xea,
	0xb5, 0x26, 0x68, 0xa9, 0xf6, 0xab, 0x13, 0x8e, 0x94, 0x6f, 0x1c, 0x6d, 0xdd, 0xe6, 0x50, 0x76,
	0xe0, 0x3f, 0x8f, 0x99, 0x48, 0x95, 0x5e, 0x55, 0xaa, 0xd4, 0xa6, 0xb3, 0x2a, 0xb3, 0x76, 0x0b,
	0xa9, 0x7d, 0x80, 0x30, 0xf2, 0x46, 0x6e, 0x8a, 0x43, 0x6f, 0x4c, 0xf5, 0xe5, 0x22, 0xf8, 0xcd,
	0x5f, 0x05, 0x5f, 0xf3, 0xab, 0x7a, 0x5a, 0x31, 0xd3, 0x51, 0x23, 0x6f, 0xe4, 0x14, 0x6b, 0xed,
	0x09, 0x54, 0x7d, 0x4c, 0xdc, 0x43, 0x12, 0x63, 0xaa, 0xd7, 0x8b, 0x17, 0x7b, 0x30, 0xe1, 0xa8,
	0x82, 0x53, 0x8e, 0xfe, 0x93, 0x0e, 0x73, 0x64, 0x3a, 0x75, 0x1f, 0x93, 0x3d, 0xb1, 0xd4, 0x5e,
	0xc2, 0x46, 0x9c, 0x45, 0x2e, 0xc5, 0xe9, 0x41, 0xd0, 0xc7, 0x29, 0xd5, 0xd5, 0xa2, 0xcb, 0x8f,
	0x26, 0x1c, 0xdd, 0xdc, 0x98, 0x72, 0xb4, 0x2e, 0x7d, 0x6e, 0x60, 0xd3, 0x59, 0x8d, 0xb3, 0x68,
	0x67, 0x26, 0xb5, 0xcf, 0x00, 0xde, 0xcb, 0x62, 0xf1, 0x40, 0x41, 0xec, 0xbb, 0x7d, 0x12, 0x25,
	0x21, 0x66, 0x01, 0x89, 0x5d, 0x31, 0x52, 0x3a, 0x6c, 0x82, 0xd6, 0xca, 0xd6, 0x86, 0x25, 0xe7,
	0xcd, 0x9a, 0xcd, 0x9b, 0xb5, 0x3b, 0x9b, 0x37, 0xbb, 0x23, 0x5e, 0x6e, 0xc2, 0xd1, 0x5a, 0x65,
	0x22, 0x2a, 0xa7, 0x1c, 0xdd, 0x91, 0xe9, 0x37, 0xb9, 0x79, 0xf4, 0x1d, 0x01, 0xe7, 0xee, 0x1c,
	0x3e, 0x9b, 0x07, 0x0a, 0xcb, 0x6e, 0xfd, 0xd3, 0x31, 0x52, 0x2e, 0x8f, 0x11, 0x30, 0x07, 0x70,
	0x71, 0x9b, 0x90, 0x50, 0x73, 0x60, 0xd9, 0xd6, 0x62, 0x6c, 0x55, 0xbb, 0xfb, 0xe7, 0x9d, 0x72,
	0x4a, 0xa7, 0x6e, 0x5d, 0x24, 0x5c, 0x1d, 0x23, 0x60, 0x47, 0xa7, 0xe7, 0x86, 0x72, 0x76, 0x6e,
	0x28, 0x57, 0xe7, 0x06, 0xf8, 0x98, 0x1b, 0xe0, 0x4b, 0x6e, 0x80, 0x93, 0xdc, 0x00, 0xa7, 0xb9,
	0x01, 0x7e, 0xe4, 0x06, 0xb8, 0xcc, 0x0d, 0xe5, 0x2a, 0x37, 0xc0, 0xd1, 0x85, 0xa1, 0x9c, 0x5e,
	0x18, 0xca, 0xd9, 0x85, 0xa1, 0xec, 0xfd, 0xe6, 0xcc, 0x8c, 0xda, 0xf3, 0xff, 0x98, 0x3c, 0x47,
	0xaf, 0x56, 0x3c, 0x60, 0xe7, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x8c, 0x49, 0x96, 0xf4,
	0x04, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProvidersDescription()
}
func ProvidersDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 5648 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0x5d, 0x70, 0x1b, 0xd7,
		0x75, 0xe6, 0xe2, 0x8f, 0xc0, 0x01, 0x08, 0x2e, 0x97, 0x94, 0x04, 0x53, 0x36, 0x21, 0x43, 0x89,
		0x4d, 0xdb, 0x31, 0x9d, 0x4a, 0xb6, 0x64, 0x43, 0x4d, 0x1c, 0xfc, 0xac, 0x28, 0xc8, 0x24, 0xc0,
		0x2c, 0x40, 0x59, 0x72, 0x9a, 0xd9, 0x59, 0x2e, 0x2e, 0x41, 0x48, 0x8b, 0x5d, 0x64, 0x77, 0x21,
		0x89, 0x6a, 0xa7, 0xe3, 0x4c, 0x9a, 0xd6, 0x99, 0xf4, 0xc7, 0x6d, 0x32, 0x53, 0x27, 0x4d, 0x52,
		0x27, 0x9d, 0x36, 0x69, 0x9a, 0xfe, 0xa4, 0x69, 0xd3, 0xa6, 0x7d, 0x68, 0xf3, 0xd0, 0x26, 0xd3,
		0x87, 0x8e, 0xf3, 0xd0, 0x99, 0x4c, 0x1f, 0xd8, 0x46, 0xce, 0x4c, 0x62, 0xc5, 0x6d, 0x5d, 0x55,
		0x0f, 0x9d, 0x7a, 0xa6, 0xd3, 0xb9, 0x7f, 0x8b, 0x5d, 0x00, 0x14, 0x40, 0xb7, 0xcd, 0xf8, 0x49,
		0xb8, 0xe7, 0x9e, 0xef, 0xbb, 0xf7, 0x9e, 0x7b, 0xee, 0xb9, 0xe7, 0xde, 0xbb, 0x14, 0xbc, 0xba,
		0x09, 0xc7, 0x5a, 0x96, 0xd5, 0x32, 0xd0, 0x63, 0x5d, 0xdb, 0x72, 0xad, 0xad, 0xde, 0xf6, 0x63,
		0x4d, 0xe4, 0xe8, 0x76, 0xbb, 0xeb, 0x5a, 0xf6, 0x0a, 0x91, 0x49, 0xb3, 0x54, 0x63, 0x85, 0x6b,
		0xe4, 0xd6, 0x61, 0xee, 0x6c, 0xdb, 0x40, 0x65, 0x4f, 0xb1, 0x8e, 0x5c, 0xe9, 0x49, 0x88, 0x6c,
		0xb7, 0x0d, 0x94, 0x11, 0x8e, 0x85, 0x97, 0x93, 0x27, 0xde, 0xb1, 0x32, 0x00, 0x5a, 0x09, 0x22,
		0x36, 0xb0, 0x58, 0x21, 0x88, 0xdc, 0x7f, 0x47, 0x60, 0x7e, 0x44, 0xad, 0x24, 0x41, 0xc4, 0xd4,
		0x3a, 0x98, 0x51, 0x58, 0x4e, 0x28, 0xe4, 0xb7, 0x94, 0x81, 0xe9, 0xae, 0xa6, 0x5f, 0xd1, 0x5a,
		0x28, 0x13, 0x22, 0x62, 0x5e, 0x94, 0x96, 0x00, 0x9a, 0xa8, 0x8b, 0xcc, 0x26, 0x32, 0xf5, 0xdd,
		0x4c, 0xf8, 0x58, 0x78, 0x39, 0xa1, 0xf8, 0x24, 0xd2, 0x23, 0x30, 0xd7, 0xed, 0x6d, 0x19, 0x6d,
		0x5d, 0xf5, 0xa9, 0xc1, 0xb1, 0xf0, 0x72, 0x54, 0x11, 0x69, 0x45, 0xb9, 0xaf, 0xfc, 0x20, 0xcc,
		0x5e, 0x43, 0xda, 0x15, 0xbf, 0x6a, 0x92, 0xa8, 0xa6, 0xb1, 0xd8, 0xa7, 0x58, 0x82, 0x54, 0x07,
		0x39, 0x8e, 0xd6, 0x42, 0xaa, 0xbb, 0xdb, 0x45, 0x99, 0x08, 0x19, 0xfd, 0xb1, 0xa1, 0xd1, 0x0f,
		0x8e, 0x3c, 0xc9, 0x50, 0x8d, 0xdd, 0x2e, 0x92, 0x0a, 0x90, 0x40, 0x66, 0xaf, 0x43, 0x19, 0xa2,
		0xfb, 0xd8, 0x4f, 0x36, 0x7b, 0x9d, 0x41, 0x96, 0x38, 0x86, 0x31, 0x8a, 0x69, 0x07, 0xd9, 0x57,
		0xdb, 0x3a, 0xca, 0xc4, 0x08, 0xc1, 0x83, 0x43, 0x04, 0x75, 0x5a, 0x3f, 0xc8, 0xc1, 0x71, 0x52,
		0x09, 0x12, 0xe8, 0xba, 0x8b, 0x4c, 0xa7, 0x6d, 0x99, 0x99, 0x69, 0x42, 0xf2, 0xce, 0x11, 0xb3,
		0x88, 0x8c, 0xe6, 0x20, 0x45, 0x1f, 0x27, 0x9d, 0x82, 0x69, 0xab, 0xeb, 0xb6, 0x2d, 0xd3, 0xc9,
		0xc4, 0x8f, 0x09, 0xcb, 0xc9, 0x13, 0xf7, 0x8e, 0x74, 0x84, 0x1a, 0xd5, 0x51, 0xb8, 0xb2, 0x54,
		0x01, 0xd1, 0xb1, 0x7a, 0xb6, 0x8e, 0x54, 0xdd, 0x6a, 0x22, 0xb5, 0x6d, 0x6e, 0x5b, 0x99, 0x04,
		0x21, 0xc8, 0x0e, 0x0f, 0x84, 0x28, 0x96, 0xac, 0x26, 0xaa, 0x98, 0xdb, 0x96, 0x92, 0x76, 0x02,
		0x65, 0xe9, 0x30, 0xc4, 0x9c, 0x5d, 0xd3, 0xd5, 0xae, 0x67, 0x52, 0xc4, 0x43, 0x58, 0x09, 0xbb,
		0x0e, 0x6a, 0xb6, 0x71, 0x73, 0x99, 0x19, 0xea, 0x3a, 0xac, 0x98, 0xfb, 0x46, 0x0c, 0x66, 0x27,
		0x71, 0xbe, 0x33, 0x10, 0xdd, 0xc6, 0xe3, 0xcf, 0x84, 0x0e, 0x62, 0x1d, 0x8a, 0x09, 0x9a, 0x37,
		0xf6, 0x16, 0xcd, 0x5b, 0x80, 0xa4, 0x89, 0x1c, 0x17, 0x35, 0xa9, 0xaf, 0x84, 0x27, 0xf4, 0x36,
		0xa0, 0xa0, 0x61, 0x67, 0x8b, 0xbc, 0x25, 0x67, 0xbb, 0x08, 0xb3, 0x5e, 0x97, 0x54, 0x5b, 0x33,
		0x5b, 0xdc, 0x6b, 0x1f, 0x1b, 0xd7, 0x93, 0x15, 0x99, 0xe3, 0x14, 0x0c, 0x53, 0xd2, 0x28, 0x50,
		0x96, 0xca, 0x00, 0x96, 0x89, 0xac, 0x6d, 0xb5, 0x89, 0x74, 0x23, 0x13, 0xdf, 0xc7, 0x4a, 0x35,
		0xac, 0x32, 0x64, 0x25, 0x8b, 0x4a, 0x75, 0x43, 0x7a, 0xaa, 0xef, 0x84, 0xd3, 0xfb, 0xf8, 0xd0,
		0x3a, 0x5d, 0x7e, 0x43, 0x7e, 0xb8, 0x09, 0x69, 0x1b, 0xe1, 0x15, 0x81, 0x9a, 0x6c, 0x64, 0x09,
		0xd2, 0x89, 0x95, 0xb1, 0x23, 0x53, 0x18, 0x8c, 0x0e, 0x6c, 0xc6, 0xf6, 0x17, 0xa5, 0xe3, 0xe0,
		0x09, 0x54, 0xe2, 0x56, 0x40, 0xe2, 0x53, 0x8a, 0x0b, 0xab, 0x5a, 0x07, 0x2d, 0xde, 0x80, 0x74,
		0xd0, 0x3c, 0xd2, 0x02, 0x44, 0x1d, 0x57, 0xb3, 0x5d, 0xe2, 0x85, 0x51, 0x85, 0x16, 0x24, 0x11,
		0xc2, 0xc8, 0x6c, 0x92, 0xf8, 0x17, 0x55, 0xf0, 0x4f, 0xe9, 0x7d, 0xfd, 0x01, 0x87, 0xc9, 0x80,
		0x1f, 0x18, 0x9e, 0xd1, 0x00, 0xf3, 0xe0, 0xb8, 0x17, 0x4f, 0xc3, 0x4c, 0x60, 0x00, 0x93, 0x36,
		0x9d, 0xfb, 0x56, 0x04, 0x0e, 0x8d, 0xe4, 0x96, 0x2e, 0xc2, 0x42, 0xcf, 0x6c, 0x9b, 0x2e, 0xb2,
		0xbb, 0x36, 0xc2, 0x2e, 0x4b, 0xdb, 0xca, 0xfc, 0x60, 0x7a, 0x1f, 0xa7, 0xdb, 0xf4, 0x6b, 0x53,
		0x16, 0x65, 0xbe, 0x37, 0x2c, 0x94, 0x2e, 0x41, 0x12, 0xfb, 0x87, 0x66, 0x6b, 0x84, 0x90, 0xae,
		0xc6, 0x13, 0x93, 0x0d, 0x79, 0xa5, 0xdc, 0x47, 0x16, 0xc3, 0x2f, 0x08, 0x21, 0xc5, 0xcf, 0x25,
		0x9d, 0x86, 0xf8, 0x36, 0xd2, 0xdc, 0x9e, 0x8d, 0x9c, 0xcc, 0x09, 0x62, 0xca, 0xa3, 0xc3, 0x8b,
		0x94, 0x2a, 0xd4, 0x91, 0xab, 0x78, 0xca, 0xd2, 0x0e, 0xa4, 0xae, 0x22, 0xbb, 0xbd, 0xdd, 0xd6,
		0x69, 0xa7, 0xf0, 0x3c, 0xa4, 0x4f, 0x3c, 0x39, 0x61, 0xa7, 0x2e, 0xf8, 0xa0, 0x75, 0x57, 0x73,
		0x51, 0x1e, 0x36, 0xab, 0x17, 0x64, 0xa5, 0x72, 0xb6, 0x22, 0x97, 0x95, 0x00, 0xf3, 0xe2, 0x27,
		0x05, 0x48, 0xfa, 0x06, 0x81, 0xe3, 0x9d, 0xd9, 0xeb, 0x6c, 0x21, 0x9b, 0x4d, 0x15, 0x2b, 0x49,
		0x47, 0x21, 0xb1, 0xdd, 0x33, 0x0c, 0xea, 0x6f, 0x74, 0xb3, 0x8c, 0x63, 0x01, 0xf6, 0x35, 0x1c,
		0xde, 0x58, 0x04, 0x21, 0xe1, 0x0d, 0xff, 0x96, 0x16, 0x21, 0xce, 0xfd, 0x31, 0x13, 0x3d, 0x26,
		0x2c, 0xc7, 0x15, 0xaf, 0x4c, 0xeb, 0xba, 0x48, 0x73, 0x51, 0x33, 0x13, 0xe3, 0x75, 0xb4, 0x7c,
		0x3e, 0x12, 0x8f, 0x88, 0xd1, 0xdc, 0xe3, 0x30, 0x37, 0x34, 0x0a, 0x69, 0x16, 0x92, 0x65, 0xb9,
		0xb4, 0x56, 0x50, 0x0a, 0x8d, 0x4a, 0xad, 0x2a, 0x4e, 0x49, 0x69, 0xf0, 0x0d, 0x4c, 0x14, 0x1e,
		0x4e, 0xc4, 0x7f, 0x38, 0x2d, 0x3e, 0xff, 0xfc, 0xf3, 0xcf, 0x87, 0x72, 0xdf, 0x8c, 0xc1, 0xc2,
		0xa8, 0xf8, 0x37, 0x32, 0x14, 0xf7, 0x07, 0x1d, 0x0e, 0x0c, 0xba, 0x00, 0x51, 0x43, 0xdb, 0x42,
		0x46, 0x26, 0x42, 0xec, 0xff, 0xc8, 0x44, 0x11, 0x76, 0x65, 0x0d, 0x43, 0x14, 0x8a, 0x94, 0xde,
		0xcb, 0x4c, 0x13, 0x25, 0x0c, 0x0f, 0x4f, 0xc6, 0x80, 0xe3, 0x22, 0x33, 0xe3, 0x51, 0x48, 0xe0,
		0x7f, 0xa9, 0xdd, 0x63, 0xd4, 0xee, 0x58, 0x40, 0xec, 0xbe, 0x08, 0x71, 0x12, 0xf2, 0x9a, 0xc8,
		0x9b, 0x13, 0x5e, 0xc6, 0x41, 0xa2, 0x89, 0xb6, 0xb5, 0x9e, 0xe1, 0xaa, 0x57, 0x35, 0xa3, 0x87,
		0x48, 0xf0, 0x4a, 0x28, 0x29, 0x26, 0xbc, 0x80, 0x65, 0x52, 0x16, 0x92, 0x34, 0x42, 0xb6, 0xcd,
		0x26, 0xba, 0x4e, 0xf6, 0xc8, 0xa8, 0x42, 0x83, 0x66, 0x05, 0x4b, 0x70, 0xf3, 0x97, 0x1d, 0xcb,
		0xe4, 0x61, 0x86, 0x34, 0x81, 0x05, 0xa4, 0xf9, 0xd3, 0x83, 0xdb, 0xf3, 0x7d, 0xa3, 0x87, 0x37,
		0x14, 0x17, 0x1f, 0x84, 0x59, 0xa2, 0x71, 0x92, 0xad, 0x62, 0xcd, 0xc8, 0xcc, 0x11, 0x37, 0x48,
		0x53, 0x71, 0x8d, 0x49, 0x73, 0x5f, 0x0f, 0x41, 0x84, 0x6c, 0x12, 0xb3, 0x90, 0x6c, 0x5c, 0xda,
		0x90, 0xd5, 0x72, 0x6d, 0xb3, 0xb8, 0x26, 0x8b, 0x02, 0x9e, 0x7a, 0x22, 0x38, 0xbb, 0x56, 0x2b,
		0x34, 0xc4, 0x90, 0x57, 0xae, 0x54, 0x1b, 0xa7, 0x1e, 0x17, 0xc3, 0x1e, 0x60, 0x93, 0x0a, 0x22,
		0x7e, 0x85, 0x93, 0x27, 0xc4, 0xa8, 0x24, 0x42, 0x8a, 0x12, 0x54, 0x2e, 0xca, 0xe5, 0x53, 0x8f,
		0x8b, 0xb1, 0xa0, 0xe4, 0xe4, 0x09, 0x71, 0x5a, 0x9a, 0x81, 0x04, 0x91, 0x14, 0x6b, 0xb5, 0x35,
		0x31, 0xee, 0x71, 0xd6, 0x1b, 0x4a, 0xa5, 0xba, 0x2a, 0x26, 0x3c, 0xce, 0x55, 0xa5, 0xb6, 0xb9,
		0x21, 0x82, 0xc7, 0xb0, 0x2e, 0xd7, 0xeb, 0x85, 0x55, 0x59, 0x4c, 0x7a, 0x1a, 0xc5, 0x4b, 0x0d,
		0xb9, 0x2e, 0xa6, 0x02, 0xdd, 0x3a, 0x79, 0x42, 0x9c, 0xf1, 0x9a, 0x90, 0xab, 0x9b, 0xeb, 0x62,
		0x5a, 0x9a, 0x83, 0x19, 0xda, 0x04, 0xef, 0xc4, 0xec, 0x80, 0xe8, 0xd4, 0xe3, 0xa2, 0xd8, 0xef,
		0x08, 0x65, 0x99, 0x0b, 0x08, 0x4e, 0x3d, 0x2e, 0x4a, 0xb9, 0x12, 0x44, 0x89, 0x1b, 0x4a, 0x12,
		0xa4, 0xd7, 0x0a, 0x45, 0x79, 0x4d, 0xad, 0x6d, 0xe0, 0x45, 0x53, 0x58, 0x13, 0x85, 0xbe, 0x4c,
		0x91, 0xdf, 0xbf, 0x59, 0x51, 0xe4, 0xb2, 0x18, 0xf2, 0xcb, 0x36, 0xe4, 0x42, 0x43, 0x2e, 0x8b,
		0xe1, 0x9c, 0x0e, 0x0b, 0xa3, 0x36, 0xc7, 0x91, 0x4b, 0xc8, 0xe7, 0x0b, 0xa1, 0x7d, 0x7c, 0x81,
		0x70, 0x0d, 0xfa, 0x42, 0xee, 0xd5, 0x10, 0xcc, 0x8f, 0x48, 0x10, 0x46, 0x36, 0xf2, 0x34, 0x44,
		0xa9, 0x2f, 0xd3, 0x20, 0xfd, 0xd0, 0xc8, 0x4c, 0x83, 0x78, 0xf6, 0x50, 0xda, 0x44, 0x70, 0xfe,
		0x84, 0x32, 0xbc, 0x4f, 0x42, 0x89, 0x29, 0x86, 0x1c, 0xf6, 0x83, 0x43, 0x1b, 0x39, 0xcd, 0x75,
		0x4e, 0x4d, 0x92, 0xeb, 0x10, 0xd9, 0xc1, 0x36, 0xf4, 0xe8, 0x88, 0x0d, 0xfd, 0x0c, 0xcc, 0x0d,
		0x11, 0x4d, 0xbc, 0xb1, 0x7e, 0x44, 0x80, 0xcc, 0x7e, 0xc6, 0x19, 0x13, 0x12, 0x43, 0x81, 0x90,
		0x78, 0x66, 0xd0, 0x82, 0xf7, 0xef, 0x3f, 0x09, 0x43, 0x73, 0xfd, 0x45, 0x01, 0x0e, 0x8f, 0x3e,
		0x38, 0x8c, 0xec, 0xc3, 0x7b, 0x21, 0xd6, 0x41, 0xee, 0x8e, 0xc5, 0x53, 0xe4, 0x07, 0x46, 0x24,
		0x5e, 0xb8, 0x7a, 0x70, 0xb2, 0x19, 0xca, 0x9f, 0xb9, 0x85, 0xf7, 0xcb, 0xfe, 0x69, 0x6f, 0x86,
		0x7a, 0xfa, 0xb1, 0x10, 0x1c, 0x1a, 0x49, 0x3e, 0xb2, 0xa3, 0xf7, 0x01, 0xb4, 0xcd, 0x6e, 0xcf,
		0xa5, 0x69, 0x30, 0x8d, 0xc4, 0x09, 0x22, 0x21, 0xc1, 0x0b, 0x47, 0xd9, 0x9e, 0xeb, 0xd5, 0xd3,
		0x5d, 0x12, 0xa8, 0x88, 0x28, 0x3c, 0xd9, 0xef, 0x68, 0x84, 0x74, 0x74, 0x69, 0x9f, 0x91, 0x0e,
		0x39, 0xe6, 0xbb, 0x41, 0xd4, 0x8d, 0x36, 0x32, 0x5d, 0xd5, 0x71, 0x6d, 0xa4, 0x75, 0xda, 0x66,
		0x8b, 0xee, 0xb6, 0xf9, 0xe8, 0xb6, 0x66, 0x38, 0x48, 0x99, 0xa5, 0xd5, 0x75, 0x5e, 0x8b, 0x11,
		0xc4, 0x81, 0x6c, 0x1f, 0x22, 0x16, 0x40, 0xd0, 0x6a, 0x0f, 0x91, 0xfb, 0xbb, 0x04, 0x24, 0x7d,
		0xc7, 0x2c, 0xe9, 0x7e, 0x48, 0x5d, 0xd6, 0xae, 0x6a, 0x2a, 0x3f, 0x3a, 0x53, 0x4b, 0x24, 0xb1,
		0x6c, 0x83, 0x1d, 0x9f, 0xdf, 0x0d, 0x0b, 0x44, 0xc5, 0xea, 0xb9, 0xc8, 0x56, 0x75, 0x43, 0x73,
		0x1c, 0x62, 0xb4, 0x38, 0x51, 0x95, 0x70, 0x5d, 0x0d, 0x57, 0x95, 0x78, 0x8d, 0xf4, 0x04, 0xcc,
		0x13, 0x44, 0xa7, 0x67, 0xb8, 0xed, 0xae, 0x81, 0x54, 0x7c, 0x98, 0x77, 0xc8, 0x96, 0xe3, 0xf5,
		0x6c, 0x0e, 0x6b, 0xac, 0x33, 0x05, 0xdc, 0x23, 0x47, 0x2a, 0xc3, 0x7d, 0x04, 0xd6, 0x42, 0x26,
		0xb2, 0x35, 0x17, 0xa9, 0xe8, 0x43, 0x3d, 0xcd, 0x70, 0x54, 0xcd, 0x6c, 0xaa, 0x3b, 0x9a, 0xb3,
		0x93, 0x59, 0xc0, 0x04, 0xc5, 0x50, 0x46, 0x50, 0xee, 0xc1, 0x8a, 0xab, 0x4c, 0x4f, 0x26, 0x6a,
		0x05, 0xb3, 0x79, 0x4e, 0x73, 0x76, 0xa4, 0x3c, 0x1c, 0x26, 0x2c, 0x8e, 0x6b, 0xb7, 0xcd, 0x96,
		0xaa, 0xef, 0x20, 0xfd, 0x8a, 0xda, 0x73, 0xb7, 0x9f, 0xcc, 0x1c, 0xf5, 0xb7, 0x4f, 0x7a, 0x58,
		0x27, 0x3a, 0x25, 0xac, 0xb2, 0xe9, 0x6e, 0x3f, 0x29, 0xd5, 0x21, 0x85, 0x27, 0xa3, 0xd3, 0xbe,
		0x81, 0xd4, 0x6d, 0xcb, 0x26, 0x7b, 0x68, 0x7a, 0x44, 0x68, 0xf2, 0x59, 0x70, 0xa5, 0xc6, 0x00,
		0xeb, 0x56, 0x13, 0xe5, 0xa3, 0xf5, 0x0d, 0x59, 0x2e, 0x2b, 0x49, 0xce, 0x72, 0xd6, 0xb2, 0xb1,
		0x43, 0xb5, 0x2c, 0xcf, 0xc0, 0x49, 0xea, 0x50, 0x2d, 0x8b, 0x9b, 0xf7, 0x09, 0x98, 0xd7, 0x75,
		0x3a, 0xe6, 0xb6, 0xae, 0xb2, 0x23, 0xb7, 0x93, 0x11, 0x03, 0xc6, 0xd2, 0xf5, 0x55, 0xaa, 0xc0,
		0x7c, 0xdc, 0x91, 0x9e, 0x82, 0x43, 0x7d, 0x63, 0xf9, 0x81, 0x73, 0x43, 0xa3, 0x1c, 0x84, 0x3e,
		0x01, 0xf3, 0xdd, 0xdd, 0x61, 0xa0, 0x14, 0x68, 0xb1, 0xbb, 0x3b, 0x08, 0x3b, 0x0d, 0x0b, 0xdd,
		0x9d, 0xee, 0x30, 0xee, 0x61, 0x3f, 0x4e, 0xea, 0xee, 0x74, 0x07, 0x81, 0xef, 0x24, 0xf7, 0x2f,
		0x36, 0xd2, 0x49, 0x8e, 0x78, 0xc4, 0xaf, 0xee, 0xab, 0x90, 0x56, 0x40, 0xd4, 0x75, 0x15, 0x99,
		0xda, 0x96, 0x81, 0x54, 0xcd, 0x46, 0xa6, 0xe6, 0x64, 0xb2, 0x44, 0x39, 0xe2, 0xda, 0x3d, 0xa4,
		0xa4, 0x75, 0x5d, 0x26, 0x95, 0x05, 0x52, 0x27, 0x3d, 0x0c, 0x73, 0xd6, 0xd6, 0x65, 0x9d, 0x7a,
		0xa4, 0xda, 0xb5, 0xd1, 0x76, 0xfb, 0x7a, 0xe6, 0x1d, 0xc4, 0xbc, 0xb3, 0xb8, 0x82, 0xf8, 0xe3,
		0x06, 0x11, 0x4b, 0x0f, 0x81, 0xa8, 0x3b, 0x3b, 0x9a, 0xdd, 0x25, 0x21, 0xd9, 0xe9, 0x6a, 0x3a,
		0xca, 0xbc, 0x93, 0xaa, 0x52, 0x79, 0x95, 0x8b, 0xf1, 0x8a, 0x70, 0xae, 0xb5, 0xb7, 0x5d, 0xce,
		0xf8, 0x20, 0x5d, 0x11, 0x44, 0xc6, 0xd8, 0x96, 0x41, 0xc4, 0x96, 0x08, 0x34, 0xbc, 0x4c, 0xd4,
		0xd2, 0xdd, 0x9d, 0xae, 0xbf, 0xdd, 0xe3, 0x30, 0x83, 0x35, 0xfb, 0x8d, 0x3e, 0x44, 0x13, 0xb7,
		0xee, 0x8e, 0xaf, 0xc5, 0xc7, 0xe1, 0x30, 0x56, 0xea, 0x20, 0x57, 0x6b, 0x6a, 0xae, 0xe6, 0xd3,
		0x7e, 0x17, 0xd1, 0xc6, 0x66, 0x5f, 0x67, 0x95, 0x81, 0x7e, 0xda, 0xbd, 0xad, 0x5d, 0xcf, 0xb1,
		0x1e, 0xa5, 0xfd, 0xc4, 0x32, 0xee, 0x5a, 0x6f, 0xf9, 0xc8, 0xf2, 0xff, 0x76, 0x40, 0xcb, 0xe5,
		0x21, 0xe5, 0x5f, 0x30, 0x52, 0x02, 0xe8, 0x92, 0x11, 0x05, 0x9c, 0x3d, 0x95, 0x6a, 0x65, 0x9c,
		0xf7, 0x3c, 0x27, 0x8b, 0x21, 0x9c, 0x7f, 0xad, 0x55, 0x1a, 0xb2, 0xaa, 0x6c, 0x56, 0x1b, 0x95,
		0x75, 0x59, 0x0c, 0xfb, 0x4e, 0x04, 0xe7, 0x23, 0xf1, 0x07, 0xc4, 0x07, 0x73, 0x77, 0xc2, 0x90,
		0x0e, 0x1e, 0xd7, 0xa5, 0x9f, 0x84, 0x23, 0xfc, 0xd6, 0xcd, 0x41, 0xae, 0x7a, 0xad, 0x6d, 0x93,
		0x95, 0xdc, 0xd1, 0xe8, 0xae, 0xea, 0x39, 0xde, 0x02, 0xd3, 0xaa, 0x23, 0xf7, 0xd9, 0xb6, 0x8d,
		0xd7, 0x69, 0x47, 0x73, 0xa5, 0x35, 0xc8, 0x9a, 0x96, 0xea, 0xb8, 0x9a, 0xd9, 0xd4, 0xec, 0xa6,
		0xda, 0xbf, 0xef, 0x54, 0x35, 0x5d, 0x47, 0x8e, 0x63, 0xd1, 0x1d, 0xd4, 0x63, 0xb9, 0xd7, 0xb4,
		0xea, 0x4c, 0xb9, 0xbf, 0xb5, 0x14, 0x98, 0xea, 0x80, 0xdf, 0x87, 0xf7, 0xf3, 0xfb, 0xa3, 0x90,
		0xe8, 0x68, 0x5d, 0x15, 0x99, 0xae, 0xbd, 0x4b, 0x12, 0xfb, 0xb8, 0x12, 0xef, 0x68, 0x5d, 0x19,
		0x97, 0xa5, 0x0b, 0xf0, 0x40, 0x5f, 0x55, 0x35, 0x50, 0x4b, 0xd3, 0x77, 0x55, 0x92, 0xc5, 0x93,
		0xbb, 0x23, 0x55, 0xb7, 0xcc, 0x6d, 0xa3, 0xad, 0xbb, 0x0e, 0x09, 0x2c, 0x34, 0x38, 0xe6, 0xfa,
		0x88, 0x35, 0x02, 0x38, 0xef, 0x58, 0x26, 0x49, 0xde, 0x4b, 0x5c, 0x3b, 0xe0, 0x1a, 0xa9, 0xb7,
		0x85, 0x6b, 0x04, 0xa7, 0x37, 0x22, 0x46, 0xcf, 0x47, 0xe2, 0x51, 0x31, 0x76, 0x3e, 0x12, 0x8f,
		0x89, 0xd3, 0xe7, 0x23, 0xf1, 0xb8, 0x98, 0x38, 0x1f, 0x89, 0x27, 0x44, 0xc8, 0x7d, 0x02, 0x20,
		0xe5, 0x3f, 0x8b, 0xe0, 0xa3, 0x9d, 0x4e, 0x76, 0x63, 0x81, 0xc4, 0xeb, 0xe3, 0x77, 0x3d, 0xb9,
		0xac, 0x94, 0xf0, 0x36, 0x9d, 0x8f, 0xd1, 0xc4, 0x5f, 0xa1, 0x48, 0x9c, 0x22, 0xe1, 0x85, 0x84,
		0x68, 0xa2, 0x15, 0x57, 0x58, 0x49, 0x5a, 0x85, 0xd8, 0x65, 0x87, 0x70, 0xc7, 0x08, 0xf7, 0x3b,
		0xee, 0xce, 0x7d, 0xbe, 0x4e, 0xc8, 0x13, 0xe7, 0xeb, 0x6a, 0xb5, 0xa6, 0xac, 0x17, 0xd6, 0x14,
		0x06, 0x97, 0xee, 0x81, 0x88, 0xa1, 0xdd, 0xd8, 0x0d, 0x6e, 0xe8, 0x44, 0x24, 0xad, 0xc0, 0x6c,
		0xcf, 0xa4, 0x07, 0x79, 0x3c, 0xc7, 0x58, 0x6b, 0xd6, 0xaf, 0x95, 0xee, 0xd7, 0xae, 0x61, 0xfd,
		0x09, 0xfd, 0xea, 0x1e, 0x88, 0x5c, 0x43, 0xda, 0x95, 0xe0, 0xb6, 0x4b, 0x44, 0xd2, 0x32, 0xa4,
		0x9a, 0x68, 0xab, 0xd7, 0x52, 0x6d, 0xd4, 0xd4, 0x74, 0x37, 0xb8, 0xd9, 0x24, 0x49, 0x95, 0x42,
		0x6a, 0xa4, 0x67, 0x20, 0x81, 0xe7, 0xc8, 0x24, 0x73, 0x3c, 0x47, 0x4c, 0xf0, 0xe8, 0xdd, 0x4d,
		0xc0, 0xa6, 0x98, 0x83, 0x94, 0x3e, 0x5e, 0x3a, 0x07, 0xd3, 0xae, 0x66, 0xb7, 0x90, 0xeb, 0x64,
		0xe6, 0x8f, 0x85, 0x97, 0xd3, 0x23, 0xee, 0xce, 0x46, 0x50, 0x35, 0x08, 0x84, 0x1c, 0xa3, 0x39,
		0x5c, 0x7a, 0x16, 0x44, 0x76, 0x45, 0xab, 0xb2, 0x33, 0xb0, 0x93, 0x59, 0x20, 0x0e, 0xf8, 0xae,
		0xbb, 0x53, 0xca, 0x14, 0x55, 0xa6, 0x20, 0x65, 0x16, 0x05, 0xca, 0xc1, 0x75, 0x71, 0xe8, 0x6d,
		0xb1, 0x2e, 0x16, 0xdf, 0x07, 0xe9, 0x60, 0xaf, 0xfd, 0xf7, 0xd5, 0x42, 0xe0, 0xbe, 0x1a, 0x1f,
		0x21, 0xf8, 0xa1, 0x0a, 0xcb, 0x69, 0x21, 0xf7, 0x18, 0x44, 0x89, 0xd3, 0x4b, 0x00, 0xcc, 0xed,
		0xc5, 0x29, 0x29, 0x0e, 0x91, 0x52, 0x4d, 0xc1, 0x81, 0x57, 0x84, 0x14, 0x95, 0xaa, 0x1b, 0x15,
		0xb9, 0x24, 0x8b, 0xa1, 0xdc, 0x13, 0x10, 0xa3, 0x9e, 0x8c, 0x83, 0xb2, 0xe7, 0xcb, 0xe2, 0x14,
		0x2b, 0x32, 0x0e, 0x81, 0xd7, 0x6e, 0xae, 0x17, 0x65, 0x45, 0x0c, 0xe5, 0x36, 0x61, 0x76, 0x60,
		0xf6, 0xa5, 0x43, 0x30, 0xa7, 0xc8, 0x0d, 0xb9, 0x8a, 0xcf, 0xab, 0xea, 0x66, 0xf5, 0x99, 0x6a,
		0xed, 0xd9, 0xaa, 0x38, 0x15, 0x14, 0xf3, 0x08, 0x2f, 0x48, 0x0b, 0x20, 0xf6, 0xc5, 0xf5, 0xda,
		0xa6, 0x42, 0x7a, 0xf3, 0x8b, 0x21, 0x10, 0x07, 0x5d, 0x41, 0x3a, 0x02, 0xf3, 0x8d, 0x82, 0xb2,
		0x2a, 0x37, 0x54, 0x7a, 0x06, 0xf7, 0xa8, 0x17, 0x40, 0xf4, 0x57, 0x9c, 0xad, 0x90, 0x2b, 0x86,
		0x2c, 0x1c, 0xf5, 0x4b, 0xe5, 0x8b, 0x0d, 0xb9, 0x5a, 0x27, 0x8d, 0x17, 0xaa, 0xab, 0x78, 0xbb,
		0x19, 0xe0, 0xe3, 0xa7, 0xfe, 0x30, 0xee, 0x6a, 0x90, 0x4f, 0x5e, 0x2b, 0x8b, 0x91, 0x41, 0x71,
		0xad, 0x2a, 0xd7, 0xce, 0x8a, 0xd1, 0xc1, 0xd6, 0xc9, 0x4d, 0x40, 0x4c, 0x5a, 0x84, 0xc3, 0x83,
		0x52, 0x55, 0xae, 0x36, 0x94, 0x4b, 0xe2, 0xf4, 0x60, 0xc3, 0x75, 0x59, 0xb9, 0x50, 0x29, 0xc9,
		0x62, 0x5c, 0x3a, 0x0c, 0x52, 0xb0, 0x47, 0x8d, 0x73, 0xb5, 0xb2, 0x98, 0x18, 0x15, 0x27, 0x25,
		0x71, 0x3e, 0xf7, 0x15, 0x01, 0x52, 0xfe, 0x53, 0x79, 0xc0, 0x95, 0x85, 0xb7, 0x5b, 0x88, 0xcf,
		0x7d, 0x27, 0x04, 0x49, 0xdf, 0xf1, 0x1c, 0x9f, 0xab, 0x34, 0xc3, 0xb0, 0xae, 0xa9, 0x9a, 0xd1,
		0xd6, 0x1c, 0x16, 0x85, 0x81, 0x88, 0x0a, 0x58, 0x32, 0x69, 0xd4, 0x9b, 0x7c, 0xc3, 0x8c, 0xbd,
		0xe5, 0x0d, 0x73, 0xfa, 0x6d, 0xb8, 0x61, 0x46, 0xc5, 0x58, 0xee, 0xc3, 0x21, 0x10, 0x07, 0x0f,
		0xec, 0x03, 0x76, 0x13, 0xf6, 0xb3, 0x9b, 0x7f, 0x7c, 0xa1, 0x83, 0x8c, 0x6f, 0x70, 0x2f, 0x09,
		0xef, 0xbb, 0x97, 0xfc, 0x58, 0xfc, 0xea, 0x1f, 0x04, 0x48, 0x07, 0x2f, 0x02, 0x02, 0x43, 0xcb,
		0x1d, 0x64, 0x68, 0x41, 0xd3, 0xdd, 0xbf, 0x9f, 0xe9, 0x7e, 0x2c, 0xe3, 0xfa, 0x54, 0x18, 0x66,
		0x02, 0xf7, 0x06, 0x93, 0xf6, 0xee, 0x43, 0x30, 0xd7, 0x6e, 0xa2, 0x4e, 0xd7, 0x72, 0x91, 0xa9,
		0xef, 0xaa, 0x06, 0xba, 0x8a, 0x0c, 0x62, 0x86, 0xf4, 0x88, 0x47, 0xb9, 0x40, 0x0b, 0x2b, 0x95,
		0x3e, 0x6e, 0x0d, 0xc3, 0xf2, 0xf3, 0x95, 0xb2, 0xbc, 0xbe, 0x51, 0x6b, 0xc8, 0xd5, 0xd2, 0x25,
		0x1e, 0x72, 0x15, 0xb1, 0x3d, 0xa0, 0x16, 0x30, 0xf8, 0xf1, 0xb7, 0xc7, 0xb9, 0x63, 0x03, 0xc4,
		0xc1, 0xd1, 0xe0, 0xc8, 0x3b, 0x62, 0x3c, 0xe2, 0x94, 0x34, 0x0f, 0xb3, 0xd5, 0x9a, 0x5a, 0xaf,
		0x94, 0x65, 0x55, 0x3e, 0x7b, 0x56, 0x2e, 0x35, 0xea, 0xf4, 0x92, 0xda, 0xd3, 0x6e, 0x88, 0x21,
		0xff, 0xdc, 0x7c, 0x3a, 0x0c, 0xf3, 0x23, 0x7a, 0x22, 0x15, 0xd8, 0xf5, 0x12, 0xbd, 0xf1, 0x7a,
		0x74, 0x92, 0xde, 0xaf, 0xe0, 0x03, 0xde, 0x86, 0x66, 0xbb, 0xec, 0x36, 0xea, 0x21, 0xc0, 0xe6,
		0x35, 0x5d, 0x9c, 0xfd, 0xd9, 0xec, 0xf2, 0x9f, 0xde, 0x39, 0xcd, 0xf6, 0xe5, 0xf4, 0xfe, 0xff,
		0x5d, 0x20, 0x75, 0x2d, 0xa7, 0xed, 0xb6, 0xaf, 0x22, 0xb5, 0x6d, 0xf2, 0x97, 0x82, 0xc8, 0x31,
		0x61, 0x39, 0xa2, 0x88, 0xbc, 0xa6, 0x62, 0xba, 0x9e, 0xb6, 0x89, 0x5a, 0xda, 0x80, 0x36, 0xce,
		0x4e, 0xc3, 0x8a, 0xc8, 0x6b, 0x3c, 0xed, 0xfb, 0x21, 0xd5, 0xb4, 0x7a, 0xf8, 0x60, 0x4e, 0xf5,
		0x70, 0xec, 0x14, 0x94, 0x24, 0x95, 0x79, 0x2a, 0xec, 0xca, 0xa5, 0xff, 0x44, 0x91, 0x52, 0x92,
		0x54, 0x46, 0x55, 0x1e, 0x84, 0x59, 0xad, 0xd5, 0xb2, 0x31, 0x39, 0x27, 0xa2, 0x97, 0x48, 0x69,
		0x4f, 0x4c, 0x14, 0x17, 0xcf, 0x43, 0x9c, 0xdb, 0x01, 0x1f, 0x8f, 0xb0, 0x25, 0xd4, 0x2e, 0xbd,
		0x19, 0x0d, 0x2d, 0x27, 0x94, 0xb8, 0xc9, 0x2b, 0xef, 0x87, 0x54, 0xdb, 0x51, 0xfb, 0xaf, 0xe7,
		0xa1, 0x63, 0xa1, 0xe5, 0xb8, 0x92, 0x6c, 0x3b, 0xde, 0x63, 0x5a, 0xee, 0xb3, 0x00, 0xd0, 0x77,
		0x36, 0xc9, 0x84, 0x34, 0xdd, 0x08, 0xba, 0x36, 0x72, 0x90, 0xa9, 0xf3, 0x43, 0xc3, 0x43, 0x77,
		0xf1, 0x50, 0x9a, 0x42, 0x6e, 0x30, 0x40, 0xf1, 0xde, 0x17, 0x04, 0xe1, 0x25, 0x21, 0xf2, 0x92,
		0x20, 0x7c, 0x41, 0x10, 0x21, 0x72, 0xe2, 0xdd, 0x27, 0x4e, 0x4a, 0x71, 0xf9, 0xe2, 0xc6, 0x5a,
		0xa5, 0x54, 0x69, 0x28, 0x33, 0xdb, 0x7e, 0x65, 0xe9, 0x03, 0xfe, 0x47, 0xf5, 0xd0, 0x7e, 0x67,
		0x88, 0x7e, 0x53, 0x32, 0x7b, 0x4a, 0x2f, 0x66, 0x48, 0x2b, 0x31, 0xd2, 0x4a, 0x8a, 0xb5, 0x12,
		0xa9, 0x6d, 0xc8, 0x55, 0xdf, 0x73, 0xfb, 0x47, 0x05, 0x38, 0xc2, 0x1f, 0xdb, 0xd8, 0xfe, 0x86,
		0x4c, 0xdd, 0x6a, 0xb6, 0xcd, 0x16, 0x7b, 0x66, 0xfc, 0x89, 0xbb, 0xb5, 0xa5, 0x30, 0x28, 0x19,
		0x9e, 0xcc, 0x80, 0xc5, 0x45, 0xdf, 0xf0, 0xd2, 0xac, 0xe1, 0xd8, 0x46, 0xa1, 0xf4, 0x8c, 0x5c,
		0x56, 0x0e, 0xd9, 0xa3, 0x20, 0xd2, 0x0b, 0x02, 0x1c, 0x61, 0x93, 0x4f, 0x7b, 0x71, 0x55, 0x33,
		0xda, 0x4d, 0xfa, 0xdc, 0x19, 0x19, 0xdf, 0x0f, 0x7a, 0x0d, 0x47, 0x28, 0x2f, 0x78, 0xc0, 0xe2,
		0x7d, 0xbe, 0x7e, 0xcc, 0xb1, 0x7e, 0x24, 0xd6, 0x0b, 0xd5, 0x72, 0xa1, 0x51, 0x53, 0x2e, 0x29,
		0x87, 0x9c, 0x51, 0x28, 0xe9, 0xa7, 0x41, 0xe4, 0x17, 0x00, 0x9e, 0x29, 0xa2, 0xfb, 0xbd, 0xf8,
		0xf5, 0xbb, 0xc0, 0xae, 0x11, 0x3c, 0x23, 0x1c, 0xf7, 0x35, 0x7e, 0x84, 0x35, 0x3e, 0xbb, 0x26,
		0x57, 0x57, 0x1b, 0xe7, 0xd4, 0x0d, 0x45, 0x26, 0xcf, 0x37, 0xca, 0x6c, 0x27, 0x88, 0x92, 0x10,
		0x24, 0x69, 0xaa, 0x41, 0x6f, 0x1c, 0xe8, 0x91, 0xf1, 0x81, 0xbb, 0xb5, 0x4b, 0x32, 0x0d, 0xa2,
		0xcd, 0xdc, 0x2a, 0xcc, 0xe7, 0x7c, 0x86, 0xb5, 0x1a, 0x2d, 0xac, 0xad, 0xd5, 0x9e, 0x55, 0xe0,
		0xb2, 0xa7, 0x29, 0x95, 0x21, 0x65, 0x6b, 0xd7, 0x54, 0x2f, 0xc6, 0xfe, 0x60, 0x7c, 0x42, 0x52,
		0x0c, 0xbf, 0x24, 0x4c, 0x29, 0x49, 0x5b, 0xbb, 0xc6, 0x64, 0x4e, 0xee, 0xa7, 0x60, 0x26, 0xe0,
		0xd7, 0x38, 0x4b, 0x25, 0xd9, 0x2d, 0x1e, 0x60, 0x5d, 0xae, 0x96, 0xfc, 0x59, 0x75, 0x0a, 0x3c,
		0x0f, 0x17, 0x05, 0x5c, 0xaa, 0xac, 0xb3, 0x52, 0x08, 0x87, 0xcb, 0x35, 0x79, 0xb5, 0x50, 0xba,
		0xd4, 0x7f, 0x83, 0x0a, 0xe7, 0x4e, 0x43, 0x9c, 0xbb, 0x32, 0xce, 0x95, 0x49, 0xca, 0x3b, 0x90,
		0xa9, 0xc7, 0x81, 0xf8, 0xb3, 0x28, 0xe0, 0x73, 0x49, 0x69, 0xad, 0x56, 0x97, 0xcb, 0x62, 0x28,
		0x77, 0x01, 0x0e, 0x8d, 0xf4, 0x4b, 0xe9, 0x38, 0x64, 0xf9, 0x7b, 0x16, 0xcd, 0xc2, 0x55, 0xb9,
		0x5a, 0xaa, 0x95, 0xf1, 0xb9, 0xa5, 0xcf, 0x09, 0xc0, 0x5c, 0x95, 0xf6, 0x52, 0xbe, 0xb8, 0x51,
		0xa8, 0x96, 0x09, 0xaf, 0x0a, 0x87, 0x46, 0xfa, 0x19, 0xe6, 0x65, 0xc7, 0x1f, 0xca, 0x7a, 0xa1,
		0xb0, 0x56, 0x29, 0x17, 0x06, 0x0e, 0x2c, 0x33, 0xd0, 0x77, 0x3d, 0x51, 0xc0, 0x5d, 0x3f, 0x57,
		0xc1, 0xdb, 0x00, 0xfe, 0x55, 0xad, 0x55, 0x65, 0x31, 0x9c, 0xab, 0xc3, 0xec, 0x80, 0x17, 0x49,
		0xf7, 0x42, 0x86, 0x1d, 0x24, 0x46, 0xf5, 0x95, 0xd8, 0x2d, 0xe0, 0x51, 0xf4, 0x48, 0x55, 0x96,
		0xd7, 0x2a, 0xeb, 0x95, 0x06, 0xe9, 0xf5, 0x39, 0x80, 0xbe, 0x8b, 0xe0, 0x1d, 0xeb, 0x7c, 0xbd,
		0x56, 0x55, 0xcf, 0xe2, 0xf3, 0x58, 0xc3, 0x47, 0x95, 0x00, 0xea, 0x26, 0xa2, 0x80, 0x8f, 0x0d,
		0x6c, 0x36, 0x8a, 0x72, 0xbd, 0x81, 0x37, 0xb0, 0x9a, 0x82, 0xf7, 0xab, 0x18, 0xde, 0xaf, 0x5e,
		0x9b, 0x7e, 0x38, 0x16, 0x7f, 0x6d, 0x5a, 0xbc, 0x85, 0xff, 0xfd, 0x78, 0x55, 0x7c, 0xb1, 0x9a,
		0xfb, 0x62, 0x08, 0xd2, 0xc1, 0xef, 0xa6, 0xa4, 0x32, 0xc4, 0x0d, 0x8b, 0x7d, 0xad, 0x40, 0x3f,
		0xda, 0x5b, 0x1e, 0xf3, 0xa9, 0xd5, 0xca, 0x1a, 0xd3, 0x57, 0x3c, 0xe4, 0xe2, 0xdf, 0x0b, 0x10,
		0xe7, 0x62, 0xe9, 0x30, 0x44, 0xba, 0x9a, 0xbb, 0x43, 0xe8, 0xa2, 0xc5, 0x90, 0x28, 0x28, 0xa4,
		0x8c, 0xe5, 0x4e, 0x57, 0xa3, 0x5f, 0x6a, 0x30, 0x39, 0x2e, 0xe3, 0x7d, 0xcf, 0x40, 0x5a, 0x93,
		0xdc, 0xe0, 0x5b, 0x9d, 0x0e, 0x32, 0x5d, 0x87, 0xef, 0x7b, 0x4c, 0x5e, 0x62, 0x62, 0xe9, 0x11,
		0x98, 0x73, 0x6d, 0xad, 0x6d, 0x04, 0x74, 0x23, 0x44, 0x57, 0xe4, 0x15, 0x9e, 0x72, 0x1e, 0xee,
		0xe1, 0xbc, 0x4d, 0xe4, 0x6a, 0xfa, 0x0e, 0x6a, 0xf6, 0x41, 0x31, 0xf2, 0x52, 0x77, 0x84, 0x29,
		0x94, 0x59, 0x3d, 0xc7, 0xe6, 0x5e, 0x09, 0xc1, 0x1c, 0x7f, 0x73, 0x68, 0x7a, 0xc6, 0x5a, 0x07,
		0xd0, 0x4c, 0xd3, 0x72, 0xfd, 0xe6, 0x1a, 0xde, 0xea, 0x87, 0x70, 0x2b, 0x05, 0x0f, 0xa4, 0xf8,
		0x08, 0x16, 0x7f, 0x24, 0x00, 0xf4, 0xab, 0xf6, 0xb5, 0x5b, 0x16, 0x92, 0xec, 0xab, 0x38, 0xf2,
		0x69, 0x25, 0x3d, 0xee, 0x03, 0x15, 0x9d, 0x6d, 0x1b, 0xe4, 0x31, 0x71, 0x0b, 0xb5, 0xda, 0x26,
		0xfb, 0x0a, 0x82, 0x16, 0xf8, 0x63, 0x62, 0xa4, 0xff, 0x81, 0x90, 0x02, 0x71, 0x07, 0x75, 0x34,
		0xd3, 0x6d, 0xeb, 0x2c, 0x4e, 0x9e, 0x3a, 0x50, 0xe7, 0x57, 0xea, 0x0c, 0xad, 0x78, 0x3c, 0xb9,
		0x65, 0x88, 0x73, 0xa9, 0xb7, 0x3e, 0xa6, 0xa4, 0x69, 0x08, 0xd7, 0x65, 0x1c, 0x3d, 0x88, 0xb3,
		0x56, 0x0a, 0x75, 0x31, 0x54, 0xfc, 0x59, 0x98, 0xd7, 0xad, 0xce, 0x60, 0x83, 0x45, 0x71, 0xe0,
		0xa1, 0xce, 0x39, 0x27, 0x3c, 0xf7, 0x28, 0x53, 0x6a, 0x59, 0x86, 0x66, 0xb6, 0x56, 0x2c, 0xbb,
		0xd5, 0xff, 0x30, 0x15, 0x6f, 0xae, 0x8e, 0xef, 0xf3, 0xd4, 0xee, 0xd6, 0x7f, 0x0a, 0xc2, 0x17,
		0x42, 0xe1, 0xd5, 0x8d, 0xe2, 0x97, 0x43, 0x8b, 0xab, 0x14, 0xb8, 0xc1, 0x87, 0xa3, 0xa0, 0x6d,
		0x03, 0xe9, 0xb8, 0xf3, 0xf0, 0xcd, 0x47, 0x60, 0xa1, 0x65, 0xb5, 0x2c, 0xc2, 0xf4, 0x18, 0xfe,
		0xc5, 0xbe, 0x6c, 0x4d, 0x78, 0xd2, 0xc5, 0xb1, 0x9f, 0xc1, 0xe6, 0xab, 0x30, 0xcf, 0x94, 0x55,
		0xb2, 0xd7, 0xd3, 0x27, 0x01, 0xe9, 0xae, 0xef, 0xd1, 0x99, 0xaf, 0x7e, 0x9f, 0x9c, 0x94, 0x94,
		0x39, 0x06, 0xc5, 0x75, 0xf4, 0xd5, 0x20, 0xaf, 0xc0, 0xa1, 0x00, 0x1f, 0xdd, 0xe9, 0x90, 0x3d,
		0x86, 0xf1, 0x6f, 0x18, 0xe3, 0xbc, 0x8f, 0xb1, 0xce, 0xa0, 0xf9, 0x12, 0xcc, 0x1c, 0x84, 0xeb,
		0x6f, 0x19, 0x57, 0x0a, 0xf9, 0x49, 0x56, 0x61, 0x96, 0x90, 0xe8, 0x3d, 0xc7, 0xb5, 0x3a, 0x24,
		0x41, 0xbd, 0x3b, 0xcd, 0xb7, 0xbe, 0x4f, 0x17, 0x6d, 0x1a, 0xc3, 0x4a, 0x1e, 0x2a, 0x9f, 0x07,
		0x92, 0xc4, 0x34, 0x91, 0x6e, 0x8c, 0x61, 0xf8, 0x36, 0xeb, 0x88, 0xa7, 0x9f, 0xbf, 0x00, 0x0b,
		0xf8, 0x37, 0xc9, 0x1f, 0xfd, 0x3d, 0x19, 0xff, 0x78, 0x9d, 0xf9, 0xce, 0x47, 0x68, 0x5c, 0x98,
		0xf7, 0x08, 0x7c, 0x7d, 0xf2, 0xcd, 0x62, 0x0b, 0xb9, 0x2e, 0xb2, 0x1d, 0x55, 0x33, 0x46, 0x75,
		0xcf, 0xf7, 0xfa, 0x97, 0xf9, 0xd4, 0xeb, 0xc1, 0x59, 0x5c, 0xa5, 0xc8, 0x82, 0x61, 0xe4, 0x37,
		0xe1, 0xc8, 0x08, 0xaf, 0x98, 0x80, 0xf3, 0xd3, 0x8c, 0x73, 0x61, 0xc8, 0x33, 0x30, 0xed, 0x06,
		0x70, 0xb9, 0x37, 0x97, 0x13, 0x70, 0xfe, 0x06, 0xe3, 0x94, 0x18, 0x96, 0x4f, 0x29, 0x66, 0x3c,
		0x0f, 0x73, 0x57, 0x91, 0xbd, 0x65, 0x39, 0xec, 0xc5, 0x75, 0x02, 0xba, 0xcf, 0x30, 0xba, 0x59,
		0x06, 0x24, 0x4f, 0xb0, 0x98, 0xeb, 0x29, 0x88, 0x6f, 0x6b, 0x3a, 0x9a, 0x80, 0xe2, 0xb3, 0x8c,
		0x62, 0x1a, 0xeb, 0x63, 0x68, 0x01, 0x52, 0x2d, 0x8b, 0x65, 0x91, 0xe3, 0xe1, 0x9f, 0x63, 0xf0,
		0x24, 0xc7, 0x30, 0x8a, 0xae, 0xd5, 0xed, 0x19, 0xf8, 0x7c, 0x31, 0x9e, 0xe2, 0x37, 0x39, 0x05,
		0xc7, 0x30, 0x8a, 0x03, 0x98, 0xf5, 0x65, 0x4e, 0xe1, 0xf8, 0xec, 0xf9, 0x34, 0x24, 0x2d, 0xd3,
		0xd8, 0xb5, 0xcc, 0x49, 0x3a, 0xf1, 0x79, 0xc6, 0x00, 0x0c, 0x82, 0x09, 0xce, 0x40, 0x62, 0xd2,
		0x89, 0xf8, 0xed, 0xd7, 0xf9, 0xf2, 0xe0, 0x33, 0xb0, 0x0a, 0xb3, 0x3c, 0x40, 0xb5, 0x2d, 0x73,
		0x02, 0x8a, 0xdf, 0x61, 0x14, 0x69, 0x1f, 0x8c, 0x0d, 0xc3, 0x45, 0x8e, 0xdb, 0x42, 0x93, 0x90,
		0x7c, 0x91, 0x0f, 0x83, 0x41, 0x98, 0x29, 0xb7, 0x90, 0xa9, 0xef, 0x4c, 0xc6, 0xf0, 0x25, 0x6e,
		0x4a, 0x8e, 0xc1, 0x14, 0x25, 0x98, 0xe9, 0x68, 0xb6, 0xb3, 0xa3, 0x19, 0x13, 0x4d, 0xc7, 0xef,
		0x32, 0x8e, 0x94, 0x07, 0x62, 0x16, 0xe9, 0x99, 0x07, 0xa1, 0xf9, 0x32, 0xb7, 0x88, 0x0f, 0xc6,
		0x96, 0x9e, 0xe3, 0x92, 0xe7, 0xe9, 0x83, 0xb0, 0xfd, 0x1e, 0x5f, 0x7a, 0x14, 0xbb, 0xee, 0x67,
		0x3c, 0x03, 0x09, 0xa7, 0x7d, 0x63, 0x22, 0x9a, 0xaf, 0xf0, 0x99, 0x26, 0x00, 0x0c, 0xbe, 0x04,
		0xf7, 0x8c, 0xdc, 0x26, 0x26, 0x20, 0xfb, 0x7d, 0x46, 0x76, 0x78, 0xc4, 0x56, 0xc1, 0x42, 0xc2,
		0x41, 0x29, 0xff, 0x80, 0x87, 0x04, 0x34, 0xc0, 0xb5, 0x01, 0x0b, 0x3d, 0xd3, 0xd1, 0xb6, 0x0f,
		0x66, 0xb5, 0x3f, 0xe4, 0x56, 0xa3, 0xd8, 0x80, 0xd5, 0x1a, 0x70, 0x98, 0x31, 0x1e, 0x6c, 0x5e,
		0xff, 0x88, 0x07, 0x56, 0x8a, 0xde, 0x0c, 0xce, 0xee, 0x07, 0x60, 0xd1, 0x33, 0x27, 0xbf, 0x3d,
		0x70, 0xd4, 0x8e, 0xd6, 0x9d, 0x80, 0xf9, 0xab, 0x8c, 0x99, 0x47, 0x7c, 0xef, 0xfa, 0xc1, 0x59,
		0xd7, 0xba, 0x98, 0xfc, 0x22, 0x64, 0x38, 0x79, 0xcf, 0xb4, 0x91, 0x6e, 0xb5, 0xcc, 0xf6, 0x0d,
		0xd4, 0x9c, 0x80, 0xfa, 0x8f, 0x07, 0xa6, 0x6a, 0xd3, 0x07, 0xc7, 0xcc, 0x15, 0x10, 0xbd, 0x5c,
		0x45, 0x6d, 0x77, 0xba, 0x96, 0xed, 0x8e, 0x61, 0xfc, 0x1a, 0x9f, 0x29, 0x0f, 0x57, 0x21, 0xb0,
		0xbc, 0x0c, 0xf4, 0x9b, 0xcd, 0x49, 0x5d, 0xf2, 0x4f, 0x18, 0xd1, 0x4c, 0x1f, 0xc5, 0x02, 0x87,
		0x6e, 0x75, 0xba, 0x9a, 0x3d, 0x49, 0xfc, 0xfb, 0x53, 0x1e, 0x38, 0x18, 0x84, 0x05, 0x0e, 0x9c,
		0xd1, 0xe1, 0xdd, 0x7e, 0x02, 0x86, 0xaf, 0xf3, 0xc0, 0xc1, 0x31, 0x8c, 0x82, 0x27, 0x0c, 0x13,
		0x50, 0xfc, 0x19, 0xa7, 0xe0, 0x18, 0x4c, 0xf1, 0xfe, 0xfe, 0x46, 0x6b, 0xa3, 0x56, 0xdb, 0x71,
		0xd9, 0x57, 0xd5, 0x77, 0xa7, 0xfa, 0xf3, 0xd7, 0x83, 0x49, 0x98, 0xe2, 0x83, 0xe2, 0x48, 0xc4,
		0xae, 0x0c, 0xc8, 0x95, 0xd6, 0xf8, 0x8e, 0x7d, 0x83, 0x47, 0x22, 0x1f, 0x0c, 0xf7, 0xcd, 0x97,
		0x21, 0x62, 0xb3, 0xeb, 0xf8, 0xa0, 0x32, 0x01, 0xdd, 0x5f, 0x0c, 0x74, 0xae, 0xce, 0xb1, 0x98,
		0xd3, 0x97, 0xff, 0xf4, 0xcc, 0x2b, 0x68, 0x77, 0x22, 0xef, 0xfc, 0xcb, 0x81, 0xfc, 0x67, 0x93,
		0x22, 0x69, 0x0c, 0x99, 0x1d, 0xc8, 0xa7, 0xa4, 0x71, 0x7f, 0x6d, 0x91, 0xf9, 0xf0, 0x1d, 0x36,
		0xde, 0x60, 0x3a, 0x95, 0x5f, 0xc3, 0x4e, 0x1e, 0x4c, 0x7a, 0xc6, 0x93, 0x7d, 0xe4, 0x8e, 0xe7,
		0xe7, 0x81, 0x9c, 0x27, 0x7f, 0x16, 0x66, 0x02, 0x09, 0xcf, 0x78, 0xaa, 0x9f, 0x63, 0x54, 0x29,
		0x7f, 0xbe, 0x93, 0x7f, 0x02, 0x22, 0x38, 0x79, 0x19, 0x0f, 0xff, 0x28, 0x83, 0x13, 0xf5, 0xfc,
		0x7b, 0x20, 0xce, 0x93, 0x96, 0xf1, 0xd0, 0x9f, 0x67, 0x50, 0x0f, 0x82, 0xe1, 0x3c, 0x61, 0x19,
		0x0f, 0xff, 0x05, 0x0e, 0xe7, 0x10, 0x0c, 0x9f, 0xdc, 0x84, 0x7f, 0xfd, 0xf1, 0x08, 0xdb, 0x74,
		0xb8, 0xed, 0xce, 0xc0, 0x34, 0xcb, 0x54, 0xc6, 0xa3, 0x3f, 0xc6, 0x1a, 0xe7, 0x88, 0xfc, 0x69,
		0x88, 0x4e, 0x68, 0xf0, 0x5f, 0x62, 0x50, 0xaa, 0x9f, 0x2f, 0x41, 0xd2, 0x97, 0x9d, 0x8c, 0x87,
		0xff, 0x32, 0x83, 0xfb, 0x51, 0xb8, 0xeb, 0x2c, 0x3b, 0x19, 0x4f, 0xf0, 0x2b, 0xbc, 0xeb, 0x0c,
		0x81, 0xcd, 0xc6, 0x13, 0x93, 0xf1, 0xe8, 0x17, 0xb9, 0xd5, 0x39, 0x24, 0xff, 0x34, 0x24, 0xbc,
		0xcd, 0x66, 0x3c, 0xfe, 0x57, 0x19, 0xbe, 0x8f, 0xc1, 0x16, 0xf0, 0x6d, 0x76, 0xe3, 0x29, 0x7e,
		0x8d, 0x5b, 0xc0, 0x87, 0xc2, 0xcb, 0x68, 0x30, 0x81, 0x19, 0xcf, 0xf4, 0x09, 0xbe, 0x8c, 0x06,
		0xf2, 0x17, 0x3c, 0x9b, 0x24, 0xe6, 0x8f, 0xa7, 0xf8, 0x24, 0x9f, 0x4d, 0xa2, 0x8f, 0xbb, 0x31,
		0x98, 0x11, 0x8c, 0xe7, 0xf8, 0x75, 0xde, 0x8d, 0x81, 0x84, 0x20, 0xbf, 0x01, 0xd2, 0x70, 0x36,
		0x30, 0x9e, 0xef, 0x25, 0xc6, 0x37, 0x37, 0x94, 0x0c, 0xe4, 0x9f, 0x85, 0xc3, 0xa3, 0x33, 0x81,
		0xf1, 0xac, 0x9f, 0xba, 0x33, 0x70, 0x76, 0xf3, 0x27, 0x02, 0xf9, 0x46, 0x7f, 0x4b, 0xf1, 0x67,
		0x01, 0xe3, 0x69, 0x3f, 0x7d, 0x27, 0x18, 0xb8, 0xfd, 0x49, 0x40, 0xbe, 0x00, 0xd0, 0xdf, 0x80,
		0xc7, 0x73, 0x7d, 0x86, 0x71, 0xf9, 0x40, 0x78, 0x69, 0xb0, 0xfd, 0x77, 0x3c, 0xfe, 0xb3, 0x7c,
		0x69, 0x30, 0x04, 0x5e, 0x1a, 0x7c, 0xeb, 0x1d, 0x8f, 0xfe, 0x1c, 0x5f, 0x1a, 0x1c, 0x82, 0x3d,
		0xdb, 0xb7, 0xbb, 0x8d, 0x67, 0xf8, 0x3c, 0xf7, 0x6c, 0x1f, 0x2a, 0x5f, 0x85, 0xb9, 0xa1, 0x0d,
		0x71, 0x3c, 0xd5, 0x17, 0x18, 0x95, 0x38, 0xb8, 0x1f, 0xfa, 0x37, 0x2f, 0xb6, 0x19, 0x8e, 0x67,
		0xfb, 0xad, 0x81, 0xcd, 0x8b, 0xed, 0x85, 0xf9, 0x33, 0x10, 0x37, 0x7b, 0x86, 0x81, 0x17, 0x8f,
		0x74, 0xf7, 0xbf, 0xaa, 0xc9, 0xbc, 0xf6, 0x26, 0xb3, 0x0e, 0x07, 0xe4, 0x9f, 0x80, 0x28, 0xea,
		0x6c, 0xa1, 0xe6, 0x38, 0xe4, 0xad, 0x37, 0x79, 0xc0, 0xc4, 0xda, 0xf9, 0xa7, 0x01, 0xe8, 0xd5,
		0x08, 0xf9, 0xf8, 0x6c, 0x0c, 0xf6, 0x47, 0x6f, 0xb2, 0xcf, 0xd8, 0xfb, 0x90, 0x3e, 0x01, 0xfd,
		0x28, 0xfe, 0xee, 0x04, 0xaf, 0x07, 0x09, 0xc8, 0x8c, 0x3c, 0x05, 0xd3, 0x97, 0x1d, 0xcb, 0x74,
		0xb5, 0xd6, 0x38, 0xf4, 0xbf, 0x30, 0x34, 0xd7, 0xc7, 0x06, 0xeb, 0x58, 0x36, 0x72, 0xb5, 0x96,
		0x33, 0x0e, 0xfb, 0xaf, 0x0c, 0xeb, 0x01, 0x30, 0x58, 0xd7, 0x1c, 0x77, 0x92, 0x71, 0xff, 0x1b,
		0x07, 0x73, 0x00, 0xee, 0x34, 0xfe, 0x7d, 0x05, 0xed, 0x8e, 0xc3, 0xbe, 0xc1, 0x3b, 0xcd, 0xf4,
		0xf3, 0xef, 0x81, 0x04, 0xfe, 0x49, 0xff, 0x36, 0x65, 0x0c, 0xf8, 0xdf, 0x19, 0xb8, 0x8f, 0xc0,
		0x2d, 0x3b, 0x6e, 0xd3, 0x6d, 0x8f, 0x37, 0xf6, 0x6d, 0x36, 0xd3, 0x5c, 0x3f, 0x5f, 0x80, 0xa4,
		0xe3, 0x36, 0x9b, 0x3d, 0x96, 0x9f, 0x8e, 0x81, 0xff, 0xc7, 0x9b, 0xde, 0x95, 0x85, 0x87, 0xc1,
		0xb3, 0x7d, 0xed, 0x8a, 0xdb, 0xb5, 0xc8, 0x7b, 0xf4, 0x38, 0x86, 0x3b, 0x8c, 0xc1, 0x07, 0x29,
		0xee, 0xbe, 0xf2, 0xbd, 0xa5, 0xa9, 0xef, 0x7e, 0x6f, 0x69, 0xea, 0x8d, 0xef, 0x2d, 0x09, 0xcf,
		0xdf, 0x5c, 0x12, 0xbe, 0x74, 0x73, 0x49, 0xf8, 0xf6, 0xcd, 0x25, 0xe1, 0x95, 0x9b, 0x4b, 0xc2,
		0x3f, 0xdf, 0x5c, 0x12, 0x7e, 0x78, 0x73, 0x69, 0xea, 0x8d, 0x9b, 0x4b, 0xc2, 0x8b, 0xaf, 0x2e,
		0x4d, 0xbd, 0xf2, 0xea, 0xd2, 0xd4, 0x77, 0x5f, 0x5d, 0x9a, 0x1a, 0x7d, 0xf9, 0x0b, 0xab, 0xd6,
		0xaa, 0x45, 0xaf, 0x7d, 0x9f, 0xcb, 0xb5, 0xda, 0xee, 0x4e, 0x6f, 0x6b, 0x45, 0xb7, 0x3a, 0xe4,
		0x76, 0xb6, 0x7f, 0x09, 0xeb, 0x9d, 0x5d, 0xe0, 0x6b, 0x21, 0xc8, 0x0e, 0x5e, 0xd1, 0x62, 0xbb,
		0x38, 0xae, 0xd6, 0xe9, 0xee, 0xf7, 0x1f, 0x15, 0x9c, 0x81, 0x44, 0x83, 0xeb, 0x48, 0x19, 0x98,
		0x76, 0x90, 0x6e, 0x99, 0x4d, 0xfa, 0xa1, 0x54, 0x58, 0xe1, 0x45, 0x69, 0x01, 0xa2, 0xa6, 0x66,
		0x5a, 0x0e, 0xfb, 0xc3, 0x19, 0x5a, 0x28, 0x7e, 0x43, 0xf8, 0xbf, 0x1b, 0x6d, 0xda, 0xeb, 0x06,
		0x19, 0xf2, 0x86, 0xf0, 0xdc, 0x89, 0xb1, 0x17, 0xdd, 0x57, 0x4c, 0xeb, 0x9a, 0xd9, 0x1f, 0x63,
		0xe0, 0xb6, 0x7b, 0x69, 0xf0, 0xb6, 0xfb, 0x59, 0x64, 0x18, 0xcf, 0x60, 0x40, 0x03, 0x63, 0xb7,
		0x62, 0xf4, 0xaf, 0xf2, 0xe0, 0x4e, 0x82, 0xfc, 0xdd, 0xde, 0xd5, 0x76, 0x13, 0xd9, 0x0e, 0xb3,
		0x52, 0xf2, 0xfa, 0x8a, 0x27, 0x5a, 0x1c, 0x79, 0x2f, 0xbe, 0x38, 0xce, 0xd2, 0xb9, 0xbf, 0x9a,
		0x86, 0x19, 0x3a, 0x12, 0xc6, 0x24, 0x99, 0x30, 0xad, 0x35, 0x9b, 0x36, 0x72, 0xa8, 0x75, 0x53,
		0xc5, 0xc6, 0xad, 0xbd, 0x2c, 0x17, 0xdd, 0xde, 0xcb, 0xa6, 0x77, 0xb5, 0x8e, 0x91, 0xcf, 0x31,
		0x41, 0xee, 0xbf, 0xf6, 0xb2, 0x27, 0x7d, 0xb3, 0x7e, 0xb5, 0xdd, 0x45, 0xb6, 0x89, 0xdc, 0x47,
		0xaf, 0xef, 0xde, 0xa0, 0x85, 0x47, 0x4d, 0xe4, 0x5e, 0xb3, 0xec, 0x2b, 0xd4, 0x18, 0x2b, 0x05,
		0x8a, 0x53, 0x38, 0xa3, 0x54, 0x04, 0x60, 0xff, 0x9d, 0xc3, 0x15, 0xb4, 0x4b, 0x26, 0x2e, 0x55,
		0x3c, 0x7e, 0x6b, 0x2f, 0xeb, 0x93, 0xde, 0xde, 0xcb, 0xce, 0xd1, 0x56, 0xfb, 0xb2, 0x9c, 0x92,
		0xa0, 0x85, 0x67, 0xd0, 0xae, 0x74, 0x12, 0x62, 0x97, 0xb5, 0xb6, 0xc1, 0x3f, 0x34, 0x2b, 0x1e,
		0xbd, 0xb5, 0x97, 0x65, 0x92, 0xdb, 0x7b, 0xd9, 0x19, 0x8a, 0xa5, 0xe5, 0x9c, 0xc2, 0x2a, 0x24,
		0x13, 0x62, 0x8e, 0xab, 0xb9, 0x3d, 0xfa, 0xfa, 0x14, 0x2d, 0x5e, 0xc0, 0x20, 0x2a, 0xe9, 0x83,
		0x68, 0x19, 0x8f, 0xf2, 0xf4, 0x41, 0x46, 0x59, 0x77, 0xb5, 0x2b, 0xa8, 0x4e, 0xb0, 0x0a, 0xe3,
		0xc4, 0x9d, 0xd4, 0x77, 0xb4, 0xb6, 0xe9, 0xd0, 0x3f, 0x31, 0xa3, 0x9d, 0xa4, 0x92, 0x7e, 0x7b,
		0xb4, 0x9c, 0x53, 0x58, 0x85, 0x74, 0x03, 0x66, 0x1c, 0xcc, 0xd5, 0x54, 0x5d, 0xeb, 0x0a, 0x32,
		0xe9, 0x67, 0x70, 0x89, 0xe2, 0xe6, 0xb7, 0xf7, 0xb2, 0x53, 0xff, 0xb8, 0x97, 0x3d, 0x71, 0x90,
		0x4e, 0x15, 0xdb, 0xad, 0x8a, 0xe9, 0xe2, 0x56, 0x29, 0x57, 0xbf, 0x55, 0x5a, 0xce, 0x29, 0x29,
		0xda, 0x56, 0x83, 0x14, 0xa5, 0x9f, 0x01, 0xe8, 0x68, 0xd7, 0x55, 0x1b, 0x19, 0xda, 0x2e, 0xfd,
		0x8a, 0x2e, 0x51, 0xfc, 0xe0, 0xff, 0xaa, 0x61, 0x1f, 0x5f, 0x7f, 0x4e, 0xfb, 0xb2, 0x1c, 0xce,
		0xa0, 0xaf, 0x2b, 0xe4, 0xb7, 0xf4, 0x5e, 0x48, 0xb4, 0x90, 0xa5, 0xde, 0xb0, 0x4c, 0xe4, 0x90,
		0xff, 0x40, 0x20, 0x51, 0xbc, 0xff, 0xd6, 0x5e, 0xb6, 0x2f, 0xbc, 0xbd, 0x97, 0x15, 0x29, 0x83,
		0x27, 0xca, 0x29, 0xf1, 0x16, 0xb2, 0x9e, 0xc3, 0x3f, 0xa5, 0x2a, 0xcc, 0x90, 0x2b, 0x31, 0xfa,
		0x71, 0x99, 0xed, 0xd0, 0xbf, 0xb0, 0x2d, 0x3e, 0x74, 0x6b, 0x2f, 0x1b, 0xac, 0xb8, 0xbd, 0x97,
		0x5d, 0xa0, 0x3c, 0x01, 0x71, 0x4e, 0x49, 0x99, 0xbd, 0x4e, 0x9d, 0x17, 0xa5, 0x8f, 0x0b, 0x70,
		0x4f, 0xcf, 0xc4, 0x06, 0x62, 0x2f, 0x97, 0x5d, 0x03, 0x91, 0x2b, 0x5b, 0xbc, 0xa4, 0xc8, 0x57,
		0xdb, 0xc9, 0x13, 0x8b, 0x43, 0x91, 0xd8, 0x0b, 0x17, 0xc5, 0x93, 0xd8, 0x72, 0xb7, 0xf6, 0xb2,
		0xe9, 0x3e, 0x09, 0x46, 0xde, 0xde, 0xcb, 0x1e, 0xa2, 0xad, 0x07, 0xe5, 0xb9, 0x17, 0xff, 0x29,
		0x2b, 0x28, 0x47, 0x3c, 0x61, 0xc9, 0x6b, 0x10, 0x53, 0xe6, 0xe3, 0x2f, 0xbc, 0x9c, 0x9d, 0xfa,
		0xe1, 0xcb, 0x59, 0x21, 0xd7, 0x84, 0xc8, 0x86, 0x65, 0x19, 0x92, 0x02, 0x6c, 0x5a, 0xe9, 0x47,
		0xc6, 0xc5, 0xfc, 0x5b, 0x9f, 0x29, 0x85, 0x31, 0xe5, 0xe3, 0xb8, 0x85, 0x37, 0x5e, 0xce, 0x0a,
		0xc5, 0xce, 0x5b, 0x09, 0xa1, 0xcf, 0x4d, 0xb8, 0x66, 0xae, 0x3f, 0xe6, 0xc5, 0x31, 0xda, 0x0f,
		0x1e, 0xf6, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0x39, 0x8b, 0xe3, 0xa9, 0xd7, 0x46, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ProtoProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtoProvider)
	if !ok {
		that2, ok := that.(ProtoProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.Jailed != that1.Jailed {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Chains) != len(that1.Chains) {
		return false
	}
	for i := range this.Chains {
		if this.Chains[i] != that1.Chains[i] {
			return false
		}
	}
	if !this.StakedTokens.Equal(that1.StakedTokens) {
		return false
	}
	if !this.MaxRelays.Equal(that1.MaxRelays) {
		return false
	}
	if len(this.GeoZones) != len(that1.GeoZones) {
		return false
	}
	for i := range this.GeoZones {
		if this.GeoZones[i] != that1.GeoZones[i] {
			return false
		}
	}
	if this.NumServicers != that1.NumServicers {
		return false
	}
	if !this.UnstakingCompletionTime.Equal(that1.UnstakingCompletionTime) {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tokens.Equal(that1.Tokens) {
		return false
	}
	return true
}
func (this *ProtoProvider) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&types.ProtoProvider{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "Jailed: "+fmt.Sprintf("%#v", this.Jailed)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Chains: "+fmt.Sprintf("%#v", this.Chains)+",\n")
	s = append(s, "StakedTokens: "+fmt.Sprintf("%#v", this.StakedTokens)+",\n")
	s = append(s, "MaxRelays: "+fmt.Sprintf("%#v", this.MaxRelays)+",\n")
	s = append(s, "GeoZones: "+fmt.Sprintf("%#v", this.GeoZones)+",\n")
	s = append(s, "NumServicers: "+fmt.Sprintf("%#v", this.NumServicers)+",\n")
	s = append(s, "UnstakingCompletionTime: "+fmt.Sprintf("%#v", this.UnstakingCompletionTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.Pool{")
	s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProviders(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProtoProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnstakingCompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProviders(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	if m.NumServicers != 0 {
		i = encodeVarintProviders(dAtA, i, uint64(m.NumServicers))
		i--
		dAtA[i] = 0x48
	}
	if len(m.GeoZones) > 0 {
		for iNdEx := len(m.GeoZones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GeoZones[iNdEx])
			copy(dAtA[i:], m.GeoZones[iNdEx])
			i = encodeVarintProviders(dAtA, i, uint64(len(m.GeoZones[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.MaxRelays.Size()
		i -= size
		if _, err := m.MaxRelays.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProviders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.StakedTokens.Size()
		i -= size
		if _, err := m.StakedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProviders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintProviders(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintProviders(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintProviders(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProviders(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProviders(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintProviders(dAtA []byte, offset int, v uint64) int {
	offset -= sovProviders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtoProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProviders(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovProviders(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovProviders(uint64(m.Status))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovProviders(uint64(l))
		}
	}
	l = m.StakedTokens.Size()
	n += 1 + l + sovProviders(uint64(l))
	l = m.MaxRelays.Size()
	n += 1 + l + sovProviders(uint64(l))
	if len(m.GeoZones) > 0 {
		for _, s := range m.GeoZones {
			l = len(s)
			n += 1 + l + sovProviders(uint64(l))
		}
	}
	if m.NumServicers != 0 {
		n += 1 + sovProviders(uint64(m.NumServicers))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnstakingCompletionTime)
	n += 1 + l + sovProviders(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tokens.Size()
	if l > 0 {
		n += 1 + l + sovProviders(uint64(l))
	}
	return n
}

func sovProviders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProviders(x uint64) (n int) {
	return sovProviders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProtoProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtoProvider{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`Jailed:` + fmt.Sprintf("%v", this.Jailed) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Chains:` + fmt.Sprintf("%v", this.Chains) + `,`,
		`StakedTokens:` + fmt.Sprintf("%v", this.StakedTokens) + `,`,
		`MaxRelays:` + fmt.Sprintf("%v", this.MaxRelays) + `,`,
		`GeoZones:` + fmt.Sprintf("%v", this.GeoZones) + `,`,
		`NumServicers:` + fmt.Sprintf("%v", this.NumServicers) + `,`,
		`UnstakingCompletionTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UnstakingCompletionTime), "Timestamp", "timestamppb.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pool{`,
		`Tokens:` + fmt.Sprintf("%v", this.Tokens) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProviders(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProtoProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProviders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= github_com_vipernet_xyz_viper_network_types.StakeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRelays", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRelays.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoZones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GeoZones = append(m.GeoZones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumServicers", wireType)
			}
			m.NumServicers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumServicers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnstakingCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProviders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProviders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProviders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProviders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProviders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProviders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProviders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProviders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProviders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProviders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProviders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProviders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProviders = fmt.Errorf("proto: unexpected end of group")
)
