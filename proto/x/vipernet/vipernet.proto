syntax = "proto3";
package x.vipernet;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/vipernet-xyz/viper-network/x/vipernet/types";

// SessionHeader defines the header for session information
message SessionHeader {
	option (gogoproto.goproto_getters) = false;

	string providerPubKey = 1 [(gogoproto.jsontag) = "provider_public_key"];
	string chain = 2 [(gogoproto.jsontag) = "chain"];
	string geoZone = 3 [(gogoproto.jsontag) = "geo_zone"];
	int32 numServicers = 4 [(gogoproto.jsontag) = "num_servicers"];
	int64 sessionBlockHeight = 5 [(gogoproto.jsontag) = "session_height"];
}

message Session {
	option (gogoproto.goproto_getters) = false;

	SessionHeader sessionHeader = 1 [(gogoproto.jsontag) = "header", (gogoproto.nullable) = false];
	bytes sessionKey = 2 [(gogoproto.jsontag) = "key", (gogoproto.casttype) = "SessionKey"];
	repeated bytes sessionServicers = 3 [(gogoproto.jsontag) = "servicers", (gogoproto.castrepeated) = "SessionServicers"];
	repeated bytes sessionFishermen = 4 [(gogoproto.jsontag) = "fishermen", (gogoproto.castrepeated) = "SessionFishermen"];
}

message MsgClaim {
	option (gogoproto.messagename) = true;
	option (gogoproto.goproto_getters) = false;

	SessionHeader sessionHeader = 1 [(gogoproto.jsontag) = "header", (gogoproto.nullable) = false];
	HashRange merkleRoot = 2 [(gogoproto.jsontag) = "merkle_root", (gogoproto.nullable) = false];
	int64 totalProofs = 3 [(gogoproto.jsontag) = "total_proofs"];
	bytes fromAddress = 4 [(gogoproto.jsontag) = "from_address", (gogoproto.casttype) = "github.com/vipernet-xyz/viper-network/types.Address"];
	int32 evidenceType = 5 [(gogoproto.jsontag) = "evidence_type", (gogoproto.casttype) = "EvidenceType"];
	int64 expirationHeight = 6 [(gogoproto.jsontag) = "expiration_height"];
}

message MsgProtoProof {
	option (gogoproto.messagename) = true;
	option (gogoproto.goproto_getters) = false;

	MerkleProof merkleProof = 1 [(gogoproto.jsontag) = "merkle_proofs", (gogoproto.nullable) = false];
	ProofI leaf = 2 [(gogoproto.jsontag) = "leaf", (gogoproto.nullable) = false];
    int32 evidenceType = 3 [(gogoproto.jsontag) = "evidence_type", (gogoproto.casttype) = "EvidenceType"];
}

message ProofI {
	option (gogoproto.goproto_getters) = false;

	oneof proof {
		RelayProof relayProof = 1;
		ChallengeProofInvalidData challengeProof = 2;
	}
}

message ProtoEvidence {
	option (gogoproto.goproto_getters) = false;

	bytes bloomBytes = 1 [(gogoproto.jsontag) = "bloom_bytes"];
	SessionHeader sessionHeader = 2 [(gogoproto.jsontag) = "evidence_header"];
	int64 numOfProofs = 3 [(gogoproto.jsontag) = "num_of_proofs"];
	repeated ProofI proofs = 4 [(gogoproto.jsontag) = "proofs", (gogoproto.castrepeated) = "ProofIs", (gogoproto.nullable) = false];
	int32 evidenceType = 5 [(gogoproto.jsontag) = "evidence_type", (gogoproto.casttype) = "EvidenceType"];
}

message RelayProof {
	option (gogoproto.goproto_getters) = false;

	string requestHash = 1 [(gogoproto.jsontag) = "request_hash"];
	int64 entropy = 2 [(gogoproto.jsontag) = "entropy"];
	int64 sessionBlockHeight = 3 [(gogoproto.jsontag) = "session_block_height"];
	string servicerPubKey = 4 [(gogoproto.jsontag) = "servicer_pub_key"];
	string blockchain = 5 [(gogoproto.jsontag) = "blockchain"];
	AAT token = 6 [(gogoproto.jsontag) = "aat", (gogoproto.nullable) = false];
	string signature = 7 [(gogoproto.jsontag) = "signature"];
	string geoZone = 8 [(gogoproto.jsontag) = "geo_zone"];
	int32 numServicers = 9 [(gogoproto.jsontag) = "num_servicers"];
}

message ChallengeProofInvalidData {
	option (gogoproto.goproto_getters) = false;

	repeated RelayResponse majorityResponses = 1 [(gogoproto.jsontag) = "majority_responses", (gogoproto.nullable) = false];
	RelayResponse minorityResponse = 2 [(gogoproto.jsontag) = "minority_response", (gogoproto.nullable) = false];
	bytes reporterAddress = 3 [(gogoproto.jsontag) = "reporters_address", (gogoproto.casttype) = "github.com/vipernet-xyz/viper-network/types.Address"];
}

message RelayResponse {
	option (gogoproto.goproto_getters) = false;

	string signature = 1 [(gogoproto.jsontag) = "signature"];
	string response = 2 [(gogoproto.jsontag) = "payload"];
	RelayProof proof = 3 [(gogoproto.jsontag) = "proof", (gogoproto.nullable) = false];
}

message AAT {
	option (gogoproto.goproto_getters) = false;
	string version = 1 [(gogoproto.jsontag) = "version"];
	string providerPublicKey = 2 [(gogoproto.jsontag) = "provider_pub_key"];
	string clientPublicKey = 3 [(gogoproto.jsontag) = "client_pub_key"];
	string providerSignature = 4 [(gogoproto.jsontag) = "signature"];
}

message MerkleProof {
	option (gogoproto.goproto_getters) = false;

	int64 TargetIndex = 1 [(gogoproto.jsontag) = "index"];
	repeated HashRange hashRanges = 2 [(gogoproto.jsontag) = "hash_ranges", (gogoproto.nullable) = false];
	HashRange target = 3 [(gogoproto.jsontag) = "target_range", (gogoproto.nullable) = false];
}

// Range for merkle sum index tree
message Range {
	option (gogoproto.goproto_getters) = false;

	uint64 lower = 1 [(gogoproto.jsontag) = "lower"];
	uint64 upper = 2 [(gogoproto.jsontag) = "upper"];
}

message HashRange {
	bytes hash = 1 [(gogoproto.jsontag) = "merkleHash"];
	Range range = 2 [(gogoproto.jsontag) = "range", (gogoproto.nullable) = false];
}

message TestResult {
    option (gogoproto.messagename) = true;
    option (gogoproto.goproto_getters) = false;

    bytes servicerAddress = 1 [(gogoproto.jsontag) = "servicer_address", 
                               (gogoproto.casttype) = "github.com/vipernet-xyz/viper-network/types.Address"];
    google.protobuf.Timestamp timestamp = 2 [(gogoproto.jsontag) = "timestamp",
                                            (gogoproto.stdtime) = true,
                                            (gogoproto.nullable) = false];
    google.protobuf.Duration latency = 3 [(gogoproto.jsontag) = "latency",
                                          (gogoproto.stdduration) = true,
                                          (gogoproto.nullable) = false];
    bool isAvailable = 4 [(gogoproto.jsontag) = "is_available"];
	bool isReliable  = 5 [(gogoproto.jsontag) = "is_reliable"];
}

message TestI {
    option (gogoproto.goproto_getters) = false;

    oneof test {
        TestResult testResult = 1;
    }
}

message ProtoResult {
    option (gogoproto.goproto_getters) = false;

    SessionHeader sessionHeader = 1 [(gogoproto.jsontag) = "evidence_header", (gogoproto.nullable) = true];
    bytes servicerAddr = 2 [(gogoproto.jsontag) = "servicer_addr", 
                            (gogoproto.casttype) = "github.com/vipernet-xyz/viper-network/types.Address"];
    int64 numOfTestResults = 3 [(gogoproto.jsontag) = "num_of_test_results"];
    repeated TestI testResults = 4 [(gogoproto.jsontag) = "test_results", (gogoproto.castrepeated) = "TestIs"];
    int32 evidenceType = 5 [(gogoproto.jsontag) = "evidence_type", (gogoproto.casttype) = "EvidenceType"];
}

message ViperQoSReport {
    option (gogoproto.messagename) = true;
    option (gogoproto.goproto_getters) = false;

    google.protobuf.Timestamp FirstSampleTimestamp = 1 [(gogoproto.jsontag) = "first_sample_timestamp",
                                                       (gogoproto.stdtime) = true,
                                                       (gogoproto.nullable) = false];
    int64 BlockHeight = 2 [(gogoproto.jsontag) = "block_height"];
    bytes LatencyScore = 3 [(gogoproto.customtype) = "github.com/vipernet-xyz/viper-network/types.BigDec", 
                             (gogoproto.jsontag) = "latency_score", 
                             (gogoproto.nullable) = false];
    bytes AvailabilityScore = 4 [(gogoproto.customtype) = "github.com/vipernet-xyz/viper-network/types.BigDec", 
                                  (gogoproto.jsontag) = "availability_score", 
                                  (gogoproto.nullable) = false];
	bytes ReliabilityScore = 5 [(gogoproto.customtype) = "github.com/vipernet-xyz/viper-network/types.BigDec", 
                                  (gogoproto.jsontag) = "reliability_score", 
                                  (gogoproto.nullable) = false];							  
    HashRange SampleRoot = 6 [(gogoproto.jsontag) = "sample_root", 
                              (gogoproto.nullable) = false];
    int64 Nonce = 7 [(gogoproto.jsontag) = "nonce"];
    string Signature = 8 [(gogoproto.jsontag) = "signature"];
}
